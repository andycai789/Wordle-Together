[{"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\index.js":"1","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\reportWebVitals.js":"2","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\App.jsx":"3","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Header.jsx":"4","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Game.jsx":"5","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Keyboard.jsx":"6","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Notification.jsx":"7","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Board.jsx":"8","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Row.jsx":"9","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Box.jsx":"10","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\GamePage.jsx":"11","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\LobbyPage.jsx":"12","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\HomePage.jsx":"13"},{"size":493,"mtime":1649329919606,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1645866072770,"results":"16","hashOfConfig":"15"},{"size":901,"mtime":1649469179268,"results":"17","hashOfConfig":"15"},{"size":271,"mtime":1649386633160,"results":"18","hashOfConfig":"15"},{"size":4348,"mtime":1649304820471,"results":"19","hashOfConfig":"15"},{"size":3076,"mtime":1648865966345,"results":"20","hashOfConfig":"15"},{"size":448,"mtime":1648692648824,"results":"21","hashOfConfig":"15"},{"size":325,"mtime":1649198982472,"results":"22","hashOfConfig":"15"},{"size":317,"mtime":1648437162982,"results":"23","hashOfConfig":"15"},{"size":221,"mtime":1648458553550,"results":"24","hashOfConfig":"15"},{"size":1058,"mtime":1649504538893,"results":"25","hashOfConfig":"15"},{"size":3477,"mtime":1649504703553,"results":"26","hashOfConfig":"15"},{"size":2515,"mtime":1649503627154,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3uuz8v",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\index.js",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\reportWebVitals.js",[],[],["70","71"],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\App.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Header.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Game.jsx",["72","73"],[],"import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst isWordle = (boardRow, wordle) => {\r\n    return convertBoardRowToString(boardRow) === wordle.toUpperCase();\r\n}\r\n\r\nconst isPastMaxRow = (curRow, maxRow) => {\r\n    return curRow === maxRow\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, wordle) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === wordle[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        }\r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < wordle.length; i++) {\r\n        if (!map.has(wordle[i])) {\r\n            map.set(wordle[i], {val: 1})\r\n        } else {\r\n            map.get(wordle[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick, wordList, socket}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    const checkWinConditions = (newBoard) => {\r\n        if (isWordle(newBoard[row.current], wordle) || isPastMaxRow(row.current, rowLength - 1)) {\r\n            isEndGame.current = true\r\n        }\r\n    }\r\n\r\n    socket.on('board', board => {\r\n        setBoard(board)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (isEndGame.current){\r\n            return\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                console.log(\"NOT IN LIST\")\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            {/* <Notification notification={notification} hidePopUp={hidePopUp}/> */}\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Keyboard.jsx",["74"],[],"import '../css/Keyboard.css';\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst getRowLength = board => board.length\r\n\r\nconst getColLength = board => board[0].length\r\n\r\nconst getKeyboard = () => {\r\n    const qwerty = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], \r\n                    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], \r\n                    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']]\r\n\r\n    let keyboard = new Array(qwerty.length);\r\n\r\n    for (let i = 0; i < keyboard.length; i++) {\r\n        keyboard[i] = qwerty[i].map(letter => ({color: 'grey', letter: letter}))\r\n    }\r\n\r\n    return keyboard\r\n}\r\n\r\nconst getLetterColorMap = (board) => {\r\n    let map = new Map()\r\n\r\n    for (let row = 0; row < getRowLength(board); row++) {\r\n        for (let col = 0; col < getColLength(board); col++) {\r\n            let letter = board[row][col].letter\r\n            let color = board[row][col].color\r\n\r\n            if (!map.has(letter)) {\r\n                if (color !== 'empty') {\r\n                    map.set(letter, color)\r\n                } \r\n            } else {\r\n                if (color === 'green') {\r\n                    map.set(letter, color)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return map\r\n}\r\n\r\nconst changeKeyboardColors = (board, keyboard) => {\r\n    let letterColorMap = getLetterColorMap(board)\r\n\r\n    for (let row = 0; row < getRowLength(keyboard); row++) {\r\n        for (let col = 0; col < keyboard[row].length; col++) {\r\n            let letter = keyboard[row][col].letter\r\n\r\n            if (letterColorMap.has(letter)) {\r\n                keyboard[row][col].color = letterColorMap.get(letter)\r\n            }\r\n\r\n        }\r\n    }\r\n    return keyboard\r\n}\r\n\r\nconst getBackgroundColor = (color) => {\r\n    if (color === 'green') {\r\n        return '#538d4e'\r\n    } else if (color === 'yellow') {\r\n        return '#b59f3b'\r\n    } else if (color === 'gray') {\r\n        return '#3a3a3c'\r\n    } else {\r\n        return '#818384'\r\n    }\r\n}\r\n\r\nconst Keyboard = ({board, onKeyClick}) => {\r\n    const [keyboard, setKeyboard] = useState(getKeyboard())\r\n\r\n    useEffect( () => {\r\n        const newKeyboard = JSON.parse(JSON.stringify(keyboard))\r\n        setKeyboard(changeKeyboardColors(board, newKeyboard))\r\n    }, [board])\r\n\r\n    return (\r\n        <div className='keyboard'>\r\n            <div>{keyboard[0].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div>{keyboard[1].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div>\r\n                <button className='action' onClick={onKeyClick}>Enter</button>\r\n                {keyboard[2].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}\r\n                <button className='action' onClick={onKeyClick}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Keyboard;","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Notification.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Board.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Row.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Box.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\GamePage.jsx",["75","76"],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\LobbyPage.jsx",["77","78","79"],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\HomePage.jsx",[],[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":3,"column":8,"nodeType":"86","messageId":"87","endLine":3,"endColumn":20},{"ruleId":"88","severity":1,"message":"89","line":138,"column":8,"nodeType":"90","endLine":138,"endColumn":20,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":78,"column":8,"nodeType":"90","endLine":78,"endColumn":15,"suggestions":"93"},{"ruleId":"84","severity":1,"message":"94","line":2,"column":30,"nodeType":"86","messageId":"87","endLine":2,"endColumn":36},{"ruleId":"88","severity":1,"message":"95","line":19,"column":8,"nodeType":"90","endLine":19,"endColumn":10,"suggestions":"96"},{"ruleId":"84","severity":1,"message":"97","line":17,"column":12,"nodeType":"86","messageId":"87","endLine":17,"endColumn":20},{"ruleId":"84","severity":1,"message":"98","line":17,"column":22,"nodeType":"86","messageId":"87","endLine":17,"endColumn":33},{"ruleId":"88","severity":1,"message":"99","line":44,"column":8,"nodeType":"90","endLine":44,"endColumn":10,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'Notification' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board', 'checkWinConditions', 'colLength', 'input.key', 'wordList', and 'wordle'. Either include them or remove the dependency array.","ArrayExpression",["103"],"React Hook useEffect has a missing dependency: 'keyboard'. Either include it or remove the dependency array.",["104"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'pressKey'. Either include it or remove the dependency array.",["105"],"'settings' is assigned a value but never used.","'setSettings' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onSettingsChange' and 'socket'. Either include them or remove the dependency array. If 'onSettingsChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["106"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [board, checkWinConditions, colLength, input.key, input.time, wordList, wordle]",{"range":"115","text":"116"},"Update the dependencies array to be: [board, keyboard]",{"range":"117","text":"118"},"Update the dependencies array to be: [pressKey]",{"range":"119","text":"120"},"Update the dependencies array to be: [onSettingsChange, socket]",{"range":"121","text":"122"},[4063,4075],"[board, checkWinConditions, colLength, input.key, input.time, wordList, wordle]",[2238,2245],"[board, keyboard]",[652,654],"[pressKey]",[1371,1373],"[onSettingsChange, socket]"]