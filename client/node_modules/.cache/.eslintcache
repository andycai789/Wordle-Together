[{"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\index.js":"1","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\reportWebVitals.js":"2","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\App.jsx":"3","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Header.jsx":"4","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Game.jsx":"5","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Keyboard.jsx":"6","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Notification.jsx":"7","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Board.jsx":"8","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Row.jsx":"9","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Box.jsx":"10","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\GamePage.jsx":"11","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\LobbyPage.jsx":"12","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\HomePage.jsx":"13","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\ColoredRow.jsx":"14"},{"size":509,"mtime":1650102731433,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1645866072770,"results":"17","hashOfConfig":"16"},{"size":1204,"mtime":1650255087133,"results":"18","hashOfConfig":"16"},{"size":453,"mtime":1650264581850,"results":"19","hashOfConfig":"16"},{"size":4068,"mtime":1650162834673,"results":"20","hashOfConfig":"16"},{"size":3151,"mtime":1650079416533,"results":"21","hashOfConfig":"16"},{"size":860,"mtime":1650192237101,"results":"22","hashOfConfig":"16"},{"size":255,"mtime":1650077384824,"results":"23","hashOfConfig":"16"},{"size":322,"mtime":1650102184482,"results":"24","hashOfConfig":"16"},{"size":221,"mtime":1648458553550,"results":"25","hashOfConfig":"16"},{"size":2852,"mtime":1650233044630,"results":"26","hashOfConfig":"16"},{"size":3647,"mtime":1650192963694,"results":"27","hashOfConfig":"16"},{"size":3297,"mtime":1650243320940,"results":"28","hashOfConfig":"16"},{"size":639,"mtime":1650178931707,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"3uuz8v",{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"33"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"33"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"33"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\index.js",[],[],["78","79"],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\App.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Header.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Game.jsx",["80","81","82"],[],"import React, { useState, useEffect, useRef } from 'react'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, word) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === word[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        } \r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, word)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(boardRow)\r\n}\r\n\r\nconst Game = ({input, rowLength, colLength, word, handleKeyClick, wordList, socket, changeTyping, handleMessage}) => {\r\n    const message = useRef('')\r\n    const [board, setBoard] = useState(createMxNBoard(5, 5))\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n\r\n    useEffect(() => {\r\n        socket.on('board', board => {\r\n            setBoard(board)\r\n        })\r\n\r\n        socket.on('canType', (newRow, newCol) => {\r\n            row.current = newRow\r\n            col.current = newCol\r\n            changeTyping(true)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                handleMessage('Not enough letters')\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                handleMessage('Not in word list')\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], word)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n            changeTyping(false)\r\n            socket.emit('nextPlayer', row.current, col.current)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div className='boards'>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Keyboard.jsx",["83"],[],"import '../css/Keyboard.css';\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst getRowLength = board => board.length\r\n\r\nconst getColLength = board => board[0].length\r\n\r\nconst getKeyboard = () => {\r\n    const qwerty = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], \r\n                    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], \r\n                    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']]\r\n\r\n    let keyboard = new Array(qwerty.length);\r\n\r\n    for (let i = 0; i < keyboard.length; i++) {\r\n        keyboard[i] = qwerty[i].map(letter => ({color: 'grey', letter: letter}))\r\n    }\r\n\r\n    return keyboard\r\n}\r\n\r\nconst getLetterColorMap = (board) => {\r\n    let map = new Map()\r\n\r\n    for (let row = 0; row < getRowLength(board); row++) {\r\n        for (let col = 0; col < getColLength(board); col++) {\r\n            let letter = board[row][col].letter\r\n            let color = board[row][col].color\r\n\r\n            if (!map.has(letter)) {\r\n                if (color !== 'empty') {\r\n                    map.set(letter, color)\r\n                } \r\n            } else {\r\n                if (color === 'green') {\r\n                    map.set(letter, color)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return map\r\n}\r\n\r\nconst changeKeyboardColors = (board, keyboard) => {\r\n    let letterColorMap = getLetterColorMap(board)\r\n\r\n    for (let row = 0; row < getRowLength(keyboard); row++) {\r\n        for (let col = 0; col < keyboard[row].length; col++) {\r\n            let letter = keyboard[row][col].letter\r\n\r\n            if (letterColorMap.has(letter)) {\r\n                keyboard[row][col].color = letterColorMap.get(letter)\r\n            }\r\n\r\n        }\r\n    }\r\n    return keyboard\r\n}\r\n\r\nconst getBackgroundColor = (color) => {\r\n    if (color === 'green') {\r\n        return '#538d4e'\r\n    } else if (color === 'yellow') {\r\n        return '#b59f3b'\r\n    } else if (color === 'gray') {\r\n        return '#3a3a3c'\r\n    } else {\r\n        return '#818384'\r\n    }\r\n}\r\n\r\nconst Keyboard = ({board, onKeyClick}) => {\r\n    const [keyboard, setKeyboard] = useState(getKeyboard())\r\n\r\n    useEffect( () => {\r\n        const newKeyboard = JSON.parse(JSON.stringify(keyboard))\r\n        setKeyboard(changeKeyboardColors(board, newKeyboard))\r\n    }, [board])\r\n\r\n    return (\r\n        <div className='keyboard'>\r\n            <div className='keyboard-row'>{keyboard[0].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row'>{keyboard[1].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row'>\r\n                <button className='action' onClick={onKeyClick}>Enter</button>\r\n                {keyboard[2].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}\r\n                <button className='action' onClick={onKeyClick}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Keyboard;","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Notification.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Board.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Row.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\Box.jsx",[],[],"C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\GamePage.jsx",["84"],[],"import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport Game from '../Game.jsx'\r\nimport ColoredRow from '../ColoredRow.jsx';\r\nimport '../../css/GamePage.css';\r\nimport Notification from '../Notification.jsx'\r\n\r\nconst GamePage = ({socket, settings, permission, getPermission}) => {\r\n    const [userInput, setUserInput] = useState({key: '', time: 0})\r\n    const [currentPlayer, setCurrentPlayer] = useState({name: '------', id: socket.id, leader: false})\r\n    const canType = useRef(false)\r\n    const navigate = useNavigate()\r\n    const message = useRef('')\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const pressKey = (event) => {\r\n        if (canType.current) {\r\n            let key = (event instanceof KeyboardEvent) ? event.key.toUpperCase() : event.target.innerText.toUpperCase()\r\n            socket.emit('key', key)\r\n            setUserInput({key: key, time: event.timeStamp})\r\n        }\r\n    }\r\n\r\n    const changeTyping = (status) => {\r\n        canType.current = status\r\n    }\r\n\r\n    const onMessage = (newMessage) => {\r\n        message.current = newMessage\r\n        setVisible(true)\r\n        setTimeout(() => setVisible(false), 3000)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getPermission() !== 'game') {\r\n            navigate('/', {replace: true})\r\n            return\r\n        }\r\n\r\n        window.addEventListener('keydown', pressKey)\r\n        socket.on('setCurrentPlayer', (player) => {\r\n            setCurrentPlayer(player)\r\n        })\r\n\r\n        socket.on('gameNotification', (message) => {\r\n            console.log(\"GOT IT\")\r\n            onMessage(message)\r\n        })\r\n        \r\n        socket.on('returnToLobby', () => {\r\n            permission.current = 'lobby'\r\n            navigate('/lobby', {replace: true})\r\n        })\r\n\r\n        socket.emit('initialGameSettings')\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', pressKey)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"gamePage\">\r\n            <Notification visible={visible} message={message.current} position='middle-center'/>\r\n\r\n            <div className=\"playerTurn\">\r\n                <ColoredRow \r\n                    name={currentPlayer.name} \r\n                    colors={currentPlayer.id === socket.id ? 'gggggg' : 'zzzzzz'}\r\n                />\r\n            </div>\r\n\r\n            <Game \r\n                input={userInput} \r\n                rowLength={settings.rows} \r\n                colLength={settings.cols} \r\n                word={settings.word}\r\n                wordList={new Set(settings.wordList)}\r\n                handleKeyClick={pressKey}\r\n                socket={socket}\r\n                changeTyping={changeTyping}\r\n                handleMessage={onMessage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePage","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\LobbyPage.jsx",["85"],[],"import {Link, useNavigate} from \"react-router-dom\";\r\nimport {useState, useEffect} from 'react'\r\nimport '../../css/LobbyPage.css';\r\nimport ColoredRow from '../ColoredRow.jsx';\r\n\r\nconst LobbyPage = ({socket, onSettingsChange, permission, getPermission}) => {\r\n    const [rowInput, setRowInput] = useState(5)\r\n    const [colInput, setColInput] = useState(5)\r\n    const [players, setPlayers] = useState([])\r\n    const [isLeader, setIsLeader] = useState(false)\r\n    const [roomCode, setRoomCode] = useState('')\r\n    let navigate = useNavigate()\r\n\r\n    const changeRows = (event) => {\r\n        setRowInput(event.target.value)\r\n        socket.emit('newRowSelect', event.target.value)\r\n    }\r\n\r\n    const changeCols = (event) => {\r\n        setColInput(event.target.value)\r\n        socket.emit('newColSelect', event.target.value)\r\n    }\r\n\r\n    const startGame = (event) => {\r\n        if (isLeader) {\r\n            permission.current = 'game'\r\n            socket.emit('startGame')\r\n        }\r\n    }\r\n\r\n    const getPlayerColor = (player) => {\r\n        if (player.leader) {\r\n            return 'yyyyyy'\r\n        } else if (player.id === socket.id) {\r\n            return 'gggggg'\r\n        } else {\r\n            return 'xxxxxx'\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getPermission() !== 'lobby') {\r\n            navigate('/', {replace: true})\r\n            return\r\n        }\r\n\r\n        socket.on('isLeader', () => {setIsLeader(true)})\r\n        socket.on('changeCode', (response) => {setRoomCode(response)})\r\n        socket.on('changeRowSelect', (newRow) => {setRowInput(newRow)})\r\n        socket.on('changeColSelect', (newCol) => {setColInput(newCol)})\r\n        socket.on('players', (response) => {setPlayers(response)})\r\n\r\n        socket.on('startGameForPlayers', (settings) => {\r\n            onSettingsChange(settings)\r\n            permission.current = 'game'\r\n            navigate('/game', {replace: true})\r\n        })\r\n\r\n        socket.emit('initialLobbySettings') \r\n    }, [])\r\n\r\n    return (\r\n        <div className='lobbyPage'>\r\n            <div className=\"game-settings\">\r\n                <div className='game-title'> Settings </div>\r\n\r\n                <div className='settingsForm'>\r\n                    <div> Code: </div>\r\n                    {roomCode}\r\n                </div>\r\n\r\n                <div className='settingsForm'>\r\n                    Number of Attempts(Rows):\r\n                    <select disabled={!isLeader} className=\"settingsSelect\" value={rowInput} onChange={changeRows} >\r\n                        {Array.from({length: 12}, (_,i) => {return <option key={i}> {i + 5} </option>})}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='settingsForm'>\r\n                    Number of Letters(Columns):\r\n                    <select disabled={!isLeader} className=\"settingsSelect\" value={colInput} onChange={changeCols}>\r\n                        {Array.from({length: 12}, (_,i) => {return <option key={i}> {i + 5} </option>})}\r\n                    </select>\r\n                </div>\r\n\r\n                <div className='startButtonContainer'>\r\n                    <Link to={isLeader && '/game'} replace onClick={startGame}> \r\n                        <button disabled={!isLeader} className='startButton'> Start Game </button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"playersContainer\">\r\n                {players.map((player, i) => {\r\n                    return <ColoredRow key={i} name={player.name} colors={getPlayerColor(player)}/>\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LobbyPage","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\pages\\HomePage.jsx",["86"],[],"import {useState, useRef, useEffect} from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport '../../css/HomePage.css';\r\nimport ColoredRow from '../ColoredRow.jsx';\r\nimport Notification from '../Notification.jsx'\r\n\r\nconst HomePage = ({socket, permission}) => {\r\n  const [createColors, setCreateLight] = useState(\"zzzzzz\")\r\n  const [joinColors, setJoinLight] = useState(\"zzzzzz\")\r\n  const name = useRef('')\r\n  const roomCode = useRef('')\r\n  const navigate = useNavigate()\r\n\r\n  const message = useRef('')\r\n  const [visible, setVisible] = useState(false)\r\n\r\n\r\n  const changeName = (event)=>{\r\n    name.current = event.target.value.toUpperCase().padEnd(6, '-')\r\n  };\r\n\r\n  const preventNameSubmit = (event) => {\r\n    event.preventDefault();\r\n  }\r\n\r\n  const createRoom = () => {\r\n    if (name.current === '') {\r\n      name.current = '------'\r\n    }\r\n\r\n    socket.emit('createRoom', name.current)\r\n    permission.current = 'lobby'\r\n    navigate('/lobby', {replace: true})\r\n  }\r\n\r\n  const changeRoomCode = (event) => {\r\n    roomCode.current = event.target.value\r\n  }\r\n\r\n  const submitCode = () => {\r\n    if (name.current === '') {\r\n      name.current = '------'\r\n    }\r\n\r\n    socket.emit('checkCode', {name: name.current, id: socket.id, leader: false}, roomCode.current)\r\n  }\r\n\r\n  const handleSubmitCode = (event) => {\r\n    event.preventDefault()\r\n    submitCode()\r\n  }\r\n\r\n  useEffect(() => {\r\n    socket.on('validCode', () => {\r\n      permission.current = 'lobby'\r\n      navigate('/lobby', {replace: true})\r\n    })\r\n\r\n    socket.on('invalidCode', () => {\r\n      message.current = 'Please enter a valid code.'\r\n      setVisible(true)\r\n      setTimeout(() => setVisible(false), 3000)\r\n    })\r\n\r\n    socket.on('alreadyInGame', () => {\r\n      message.current = 'Game in progress.'\r\n      setVisible(true)\r\n      setTimeout(() => setVisible(false), 3000)\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <div className='HomePage'>\r\n      <div className=\"nameBox\">\r\n        <ColoredRow name=\"NAME\" colors='zzzz'/>\r\n      </div>\r\n\r\n      <form className='input' autoComplete=\"off\" onSubmit={preventNameSubmit}>\r\n        <input className='inputBar' id='nameInputBar' type=\"text\" name=\"name\" maxLength=\"6\" onChange={changeName}/>\r\n      </form>\r\n\r\n      <div className='lobbyButtonContainer'>\r\n        <div className='lobbyButton' onClick={createRoom} onMouseEnter={() => setCreateLight(\"yyyyyy\")} onMouseLeave={() => setCreateLight(\"zzzzzz\")}>\r\n          <ColoredRow name=\"CREATE\" colors={createColors}/>\r\n          <ColoredRow name=\"ROOM\" colors={createColors}/> \r\n        </div>\r\n      </div>\r\n\r\n      <div className='lobbyButtonContainer'> \r\n        <div className='lobbyButton' onClick={submitCode} onMouseEnter={() => setJoinLight(\"gggggg\")} onMouseLeave={() => setJoinLight(\"zzzzzz\")}>\r\n          <ColoredRow name=\"JOIN\" colors={joinColors}/>\r\n          <ColoredRow name=\"ROOM\" colors={joinColors}/> \r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <form className='input' autoComplete=\"off\" onSubmit={handleSubmitCode} onChange={changeRoomCode}>\r\n          <input className='inputBar' id='codeInputBar' type=\"text\" name=\"name\"/>\r\n        </form>\r\n      </div>\r\n\r\n      <Notification visible={visible} message={message.current} position='middle-center'/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomePage","C:\\Users\\andyc\\Desktop\\Web Programs\\Wordle with Friends\\client\\src\\components\\ColoredRow.jsx",[],[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":82,"column":11,"nodeType":"93","messageId":"94","endLine":82,"endColumn":18},{"ruleId":"95","severity":1,"message":"96","line":97,"column":8,"nodeType":"97","endLine":97,"endColumn":10,"suggestions":"98"},{"ruleId":"95","severity":1,"message":"99","line":128,"column":8,"nodeType":"97","endLine":128,"endColumn":20,"suggestions":"100"},{"ruleId":"95","severity":1,"message":"101","line":78,"column":8,"nodeType":"97","endLine":78,"endColumn":15,"suggestions":"102"},{"ruleId":"95","severity":1,"message":"103","line":61,"column":8,"nodeType":"97","endLine":61,"endColumn":10,"suggestions":"104"},{"ruleId":"95","severity":1,"message":"105","line":60,"column":8,"nodeType":"97","endLine":60,"endColumn":10,"suggestions":"106"},{"ruleId":"95","severity":1,"message":"107","line":70,"column":6,"nodeType":"97","endLine":70,"endColumn":8,"suggestions":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'message' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'changeTyping' and 'socket'. Either include them or remove the dependency array. If 'changeTyping' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["111"],"React Hook useEffect has missing dependencies: 'board', 'changeTyping', 'colLength', 'handleMessage', 'input.key', 'socket', 'word', and 'wordList'. Either include them or remove the dependency array. If 'changeTyping' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["112"],"React Hook useEffect has a missing dependency: 'keyboard'. Either include it or remove the dependency array.",["113"],"React Hook useEffect has missing dependencies: 'getPermission', 'navigate', 'permission', 'pressKey', and 'socket'. Either include them or remove the dependency array. If 'getPermission' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["114"],"React Hook useEffect has missing dependencies: 'getPermission', 'navigate', 'onSettingsChange', 'permission', and 'socket'. Either include them or remove the dependency array. If 'getPermission' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["115"],"React Hook useEffect has missing dependencies: 'navigate', 'permission', and 'socket'. Either include them or remove the dependency array.",["116"],"no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},"Update the dependencies array to be: [changeTyping, socket]",{"range":"129","text":"130"},"Update the dependencies array to be: [board, changeTyping, colLength, handleMessage, input.key, input.time, socket, word, wordList]",{"range":"131","text":"132"},"Update the dependencies array to be: [board, keyboard]",{"range":"133","text":"134"},"Update the dependencies array to be: [getPermission, navigate, permission, pressKey, socket]",{"range":"135","text":"136"},"Update the dependencies array to be: [getPermission, navigate, onSettingsChange, permission, socket]",{"range":"137","text":"138"},"Update the dependencies array to be: [navigate, permission, socket]",{"range":"139","text":"140"},[2700,2702],"[changeTyping, socket]",[3851,3863],"[board, changeTyping, colLength, handleMessage, input.key, input.time, socket, word, wordList]",[2238,2245],"[board, keyboard]",[1982,1984],"[getPermission, navigate, permission, pressKey, socket]",[1979,1981],"[getPermission, navigate, onSettingsChange, permission, socket]",[1868,1870],"[navigate, permission, socket]"]