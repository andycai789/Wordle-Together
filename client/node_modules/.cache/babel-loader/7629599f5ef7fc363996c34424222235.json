{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\pages\\\\GamePage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport '../../css/GamePage.css';\nimport Notification from '../Notification.jsx';\nimport ColoredRow from '../ColoredRow.jsx';\nimport Game from '../Game.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GamePage = _ref => {\n  _s();\n\n  let {\n    socket,\n    settings,\n    permission,\n    getPermission\n  } = _ref;\n  const [userInput, setUserInput] = useState({\n    key: '',\n    time: 0\n  });\n  const [currentPlayer, setCurrentPlayer] = useState({\n    name: '------',\n    id: socket.id,\n    leader: false\n  });\n  const canType = useRef(false);\n  const navigate = useNavigate();\n  const message = useRef('');\n  const [visible, setVisible] = useState(false);\n  const maxTime = 4;\n  const [seconds, setSeconds] = useState(maxTime);\n\n  const pressKey = event => {\n    if (seconds === 0) {\n      return;\n    }\n\n    if (canType.current) {\n      let key = '';\n\n      if (event instanceof KeyboardEvent) {\n        key = event.key.toUpperCase();\n      } else {\n        key = event.target.innerText.toUpperCase();\n        event.target.blur();\n      }\n\n      socket.emit('key', key);\n      setUserInput({\n        key: key,\n        time: event.timeStamp\n      });\n    }\n  };\n\n  const changeTyping = status => {\n    canType.current = status;\n  };\n\n  const onMessage = newMessage => {\n    message.current = newMessage;\n    setVisible(true);\n    setTimeout(() => setVisible(false), 3000);\n  };\n\n  useEffect(() => {\n    if (getPermission() !== 'game') {\n      navigate('/', {\n        replace: true\n      });\n      return;\n    }\n\n    window.addEventListener('keydown', pressKey);\n    socket.on('setCurrentPlayer', player => {\n      setCurrentPlayer(player);\n    });\n    socket.on('gameNotification', message => {\n      onMessage(message);\n    });\n    socket.on('returnToLobby', () => {\n      permission.current = 'lobby';\n      navigate('/lobby', {\n        replace: true\n      });\n    });\n    socket.emit('initialGameSettings');\n    return () => {\n      window.removeEventListener('keydown', pressKey);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gamePage\",\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      visible: visible,\n      message: message.current,\n      position: \"middle-center\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ColoredRow, {\n      name: currentPlayer.name,\n      color: currentPlayer.id === socket.id ? 'green' : 'none'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Game, {\n      input: userInput,\n      rowLength: settings.rows,\n      colLength: settings.cols,\n      word: settings.word,\n      wordList: new Set(settings.wordList),\n      handleKeyClick: pressKey,\n      socket: socket,\n      changeTyping: changeTyping,\n      handleMessage: onMessage,\n      currentPlayer: currentPlayer,\n      maxTime: maxTime,\n      seconds: seconds,\n      setSeconds: setSeconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GamePage, \"CuR13a1JCkVGSXthtDOe5VtepkQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = GamePage;\nexport default GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/pages/GamePage.jsx"],"names":["React","useNavigate","useState","useEffect","useRef","Notification","ColoredRow","Game","GamePage","socket","settings","permission","getPermission","userInput","setUserInput","key","time","currentPlayer","setCurrentPlayer","name","id","leader","canType","navigate","message","visible","setVisible","maxTime","seconds","setSeconds","pressKey","event","current","KeyboardEvent","toUpperCase","target","innerText","blur","emit","timeStamp","changeTyping","status","onMessage","newMessage","setTimeout","replace","window","addEventListener","on","player","removeEventListener","rows","cols","word","Set","wordList"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport '../../css/GamePage.css';\r\nimport Notification from '../Notification.jsx'\r\nimport ColoredRow from '../ColoredRow.jsx';\r\nimport Game from '../Game.jsx'\r\n\r\nconst GamePage = ({socket, settings, permission, getPermission}) => {\r\n    const [userInput, setUserInput] = useState({key: '', time: 0})\r\n    const [currentPlayer, setCurrentPlayer] = useState({name: '------', id: socket.id, leader: false})\r\n    const canType = useRef(false)\r\n    const navigate = useNavigate()\r\n    const message = useRef('')\r\n    const [visible, setVisible] = useState(false)\r\n    const maxTime = 4\r\n    const [seconds, setSeconds] = useState(maxTime)\r\n\r\n    const pressKey = (event) => {\r\n        if (seconds === 0) {\r\n\r\n            return\r\n        }\r\n\r\n        if (canType.current) {\r\n            let key = ''\r\n\r\n            if (event instanceof KeyboardEvent) {\r\n                key = event.key.toUpperCase()\r\n            } else {\r\n                key = event.target.innerText.toUpperCase()\r\n                event.target.blur()\r\n            }\r\n\r\n            socket.emit('key', key)\r\n            setUserInput({key: key, time: event.timeStamp})\r\n        }\r\n    }\r\n\r\n    const changeTyping = (status) => {\r\n        canType.current = status\r\n    }\r\n\r\n    const onMessage = (newMessage) => {\r\n        message.current = newMessage\r\n        setVisible(true)\r\n        setTimeout(() => setVisible(false), 3000)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getPermission() !== 'game') {\r\n            navigate('/', {replace: true})\r\n            return\r\n        }\r\n\r\n        window.addEventListener('keydown', pressKey)\r\n        socket.on('setCurrentPlayer', (player) => {\r\n            setCurrentPlayer(player)\r\n        })\r\n\r\n        socket.on('gameNotification', (message) => {\r\n            onMessage(message)\r\n        })\r\n        \r\n        socket.on('returnToLobby', () => {\r\n            permission.current = 'lobby'\r\n            navigate('/lobby', {replace: true})\r\n        })\r\n\r\n        socket.emit('initialGameSettings')\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', pressKey)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"gamePage\">\r\n            <Notification \r\n                visible={visible} \r\n                message={message.current} \r\n                position='middle-center'\r\n            />\r\n\r\n            <ColoredRow \r\n                name={currentPlayer.name} \r\n                color={currentPlayer.id === socket.id ? 'green' : 'none'}\r\n            />\r\n\r\n            <Game \r\n                input={userInput} \r\n                rowLength={settings.rows} \r\n                colLength={settings.cols} \r\n                word={settings.word}\r\n                wordList={new Set(settings.wordList)}\r\n                handleKeyClick={pressKey}\r\n                socket={socket}\r\n                changeTyping={changeTyping}\r\n                handleMessage={onMessage}\r\n                currentPlayer={currentPlayer}\r\n                maxTime={maxTime}\r\n                seconds={seconds}\r\n                setSeconds={setSeconds}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePage"]},"metadata":{},"sourceType":"module"}