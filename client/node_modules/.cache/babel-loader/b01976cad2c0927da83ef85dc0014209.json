{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength)); // const [notification, setNotification] = useState({visible: false, message: 'empty'})\n\n  const hidePopUp = () => {\n    setNotification({\n      visible: false,\n      message: notification.message\n    });\n  };\n\n  useEffect(() => {\n    fetch('/board').then(response => response.json()).then(data => console.log(data));\n\n    const checkWinConditions = newBoard => {\n      if (isWordle(newBoard[row.current], wordle)) {\n        isEndGame.current = true;\n        setTimeout(() => {\n          setNotification({\n            visible: true,\n            message: 'YOU WON'\n          });\n        }, 1500);\n      } else if (row.current === rowLength - 1) {\n        isEndGame.current = true;\n        setTimeout(() => {\n          setNotification({\n            visible: true,\n            message: 'YOU LOST'\n          });\n        }, 1500);\n      }\n    };\n\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (isEndGame.current) {\n      setNotification({\n        visible: true,\n        message: 'GAME FINISHED'\n      });\n      return;\n    }\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER') {\n      if (!hasFilledRow(col.current, colLength)) {\n        setNotification({\n          visible: true,\n          message: 'Not enough letters'\n        });\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        setNotification({\n          visible: true,\n          message: 'Not in word list'\n        });\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], wordle);\n      checkWinConditions(newBoard);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      notification: notification,\n      hidePopUp: hidePopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"hhJH1SAGldNYAuZ+MdtKAopVtEs=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","Game","input","rowLength","colLength","wordle","handleKeyClick","board","setBoard","createMxNBoard","hidePopUp","setNotification","visible","message","notification","fetch","then","response","json","data","console","log","checkWinConditions","newBoard","isWordle","row","current","isEndGame","setTimeout","JSON","parse","stringify","inAlphabet","key","hasEmptyBox","col","letter","hasFilledRow","inWordList","wordList","changeColorsInRow","isDeletable","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    // const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n\r\n    const hidePopUp = () => {\r\n        setNotification({visible: false, message: notification.message})\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetch('/board')\r\n            .then(response => response.json())\r\n            .then(data => console.log(data))\r\n\r\n\r\n        const checkWinConditions = (newBoard) => {\r\n            if (isWordle(newBoard[row.current], wordle)) {\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU WON'})\r\n                }, 1500)\r\n            } else if (row.current === rowLength - 1){\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU LOST'})\r\n                }, 1500)\r\n            }\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            setNotification({visible: true, message: 'GAME FINISHED'})\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                setNotification({visible: true, message: 'Not enough letters'})\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                setNotification({visible: true, message: 'Not in word list'})\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            <Notification notification={notification} hidePopUp={hidePopUp}/>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}