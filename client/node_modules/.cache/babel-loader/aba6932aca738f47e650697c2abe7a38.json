{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\ColoredRow.jsx\";\nimport React from 'react';\nimport Row from './Row.jsx'; // const formatToRow = (word) => {\n//     let wordArray = word.toUpperCase().padEnd(6, ' ').split('')\n//     return wordArray.map((letter, i) => ({letter: letter, color: ''}))\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getColorFromLetter = color => {\n  if (color === 'G') {\n    return 'green';\n  } else if (color === 'Y') {\n    return 'yellow';\n  } else if (color === 'X') {\n    return 'gray';\n  } else {\n    return '';\n  }\n};\n\nconst formatToRow = (word, colors) => {\n  let wordArray = word.toUpperCase().split('');\n  colors = colors.toUpperCase();\n  return wordArray.map((letter, i) => ({\n    letter: letter,\n    color: getColorFromLetter(colors[i])\n  }));\n};\n\nconst ColoredRow = _ref => {\n  let {\n    name,\n    colors\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Row, {\n    row: formatToRow(name, colors)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ColoredRow;\nexport default ColoredRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColoredRow\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/ColoredRow.jsx"],"names":["React","Row","getColorFromLetter","color","formatToRow","word","colors","wordArray","toUpperCase","split","map","letter","i","ColoredRow","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,WAAhB,C,CAEA;AACA;AACA;AACA;;;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AACpC,MAAIA,KAAK,KAAK,GAAd,EAAmB;AACjB,WAAO,OAAP;AACD,GAFD,MAEO,IAAIA,KAAK,KAAK,GAAd,EAAmB;AACxB,WAAO,QAAP;AACD,GAFM,MAEA,IAAIA,KAAK,KAAK,GAAd,EAAmB;AACxB,WAAO,MAAP;AACD,GAFM,MAEA;AACL,WAAO,EAAP;AACD;AACF,CAVD;;AAYA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACpC,MAAIC,SAAS,GAAGF,IAAI,CAACG,WAAL,GAAmBC,KAAnB,CAAyB,EAAzB,CAAhB;AACAH,EAAAA,MAAM,GAAGA,MAAM,CAACE,WAAP,EAAT;AACA,SAAOD,SAAS,CAACG,GAAV,CAAc,CAACC,MAAD,EAASC,CAAT,MAAgB;AAACD,IAAAA,MAAM,EAAEA,MAAT;AAAiBR,IAAAA,KAAK,EAAED,kBAAkB,CAACI,MAAM,CAACM,CAAD,CAAP;AAA1C,GAAhB,CAAd,CAAP;AACD,CAJD;;AAMA,MAAMC,UAAU,GAAG,QAAoB;AAAA,MAAnB;AAACC,IAAAA,IAAD;AAAOR,IAAAA;AAAP,GAAmB;AACrC,sBACE,QAAC,GAAD;AAAK,IAAA,GAAG,EAAEF,WAAW,CAACU,IAAD,EAAOR,MAAP;AAArB;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAJD;;KAAMO,U;AAMN,eAAeA,UAAf","sourcesContent":["import React from 'react'\r\nimport Row from './Row.jsx'\r\n\r\n// const formatToRow = (word) => {\r\n//     let wordArray = word.toUpperCase().padEnd(6, ' ').split('')\r\n//     return wordArray.map((letter, i) => ({letter: letter, color: ''}))\r\n// }\r\n\r\nconst getColorFromLetter = (color) => {\r\n  if (color === 'G') {\r\n    return 'green'\r\n  } else if (color === 'Y') {\r\n    return 'yellow'\r\n  } else if (color === 'X') {\r\n    return 'gray'\r\n  } else {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst formatToRow = (word, colors) => {\r\n  let wordArray = word.toUpperCase().split('')\r\n  colors = colors.toUpperCase()\r\n  return wordArray.map((letter, i) => ({letter: letter, color: getColorFromLetter(colors[i])}))\r\n}\r\n\r\nconst ColoredRow = ({name, colors}) => {\r\n  return (\r\n    <Row row={formatToRow(name, colors)}/>\r\n  )\r\n}\r\n\r\nexport default ColoredRow"]},"metadata":{},"sourceType":"module"}