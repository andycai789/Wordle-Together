{"ast":null,"code":"import _slicedToArray from\"C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'../css/Keyboard.css';import{useState,useEffect}from'react';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var getRowLength=function getRowLength(board){return board.length;};var getColLength=function getColLength(board){return board[0].length;};var getKeyboard=function getKeyboard(){var qwerty=[['Q','W','E','R','T','Y','U','I','O','P'],['A','S','D','F','G','H','J','K','L'],['Z','X','C','V','B','N','M']];var keyboard=new Array(qwerty.length);for(var i=0;i<keyboard.length;i++){keyboard[i]=qwerty[i].map(function(letter){return{color:'grey',letter:letter};});}return keyboard;};var getLetterColorMap=function getLetterColorMap(board){var map=new Map();for(var row=0;row<getRowLength(board);row++){for(var col=0;col<getColLength(board);col++){var letter=board[row][col].letter;var color=board[row][col].color;if(!map.has(letter)){if(color!=='empty'){map.set(letter,color);}}else{if(color==='green'){map.set(letter,color);}}}}return map;};var changeKeyboardColors=function changeKeyboardColors(board,keyboard){var letterColorMap=getLetterColorMap(board);for(var row=0;row<getRowLength(keyboard);row++){for(var col=0;col<keyboard[row].length;col++){var letter=keyboard[row][col].letter;if(letterColorMap.has(letter)){keyboard[row][col].color=letterColorMap.get(letter);}}}return keyboard;};var getBackgroundColor=function getBackgroundColor(color){if(color==='green'){return'#538d4e';}else if(color==='yellow'){return'#b59f3b';}else if(color==='gray'){return'#3a3a3c';}else{return'#818384';}};var handleFocus=function handleFocus(event){event.preventDefault();};var Keyboard=function Keyboard(_ref){var board=_ref.board,onKeyClick=_ref.onKeyClick;var _useState=useState(getKeyboard()),_useState2=_slicedToArray(_useState,2),keyboard=_useState2[0],setKeyboard=_useState2[1];useEffect(function(){var newKeyboard=JSON.parse(JSON.stringify(keyboard));setKeyboard(changeKeyboardColors(board,newKeyboard));},[board]);return/*#__PURE__*/_jsxs(\"div\",{className:\"keyboard\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"keyboard-row\",children:keyboard[0].map(function(k,index){return/*#__PURE__*/_jsxs(\"button\",{tabIndex:\"-1\",style:{backgroundColor:getBackgroundColor(k.color)},onFocus:handleFocus,onClick:onKeyClick,children:[\" \",k.letter,\" \"]},index);})}),/*#__PURE__*/_jsx(\"div\",{className:\"keyboard-row-middle\",children:keyboard[1].map(function(k,index){return/*#__PURE__*/_jsxs(\"button\",{tabIndex:\"-1\",style:{backgroundColor:getBackgroundColor(k.color)},onClick:onKeyClick,children:[\" \",k.letter,\" \"]},index);})}),/*#__PURE__*/_jsxs(\"div\",{className:\"keyboard-row\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"action\",tabIndex:\"-1\",onClick:onKeyClick,children:\"Enter\"}),keyboard[2].map(function(k,index){return/*#__PURE__*/_jsxs(\"button\",{style:{backgroundColor:getBackgroundColor(k.color)},onClick:onKeyClick,children:[\" \",k.letter,\" \"]},index);}),/*#__PURE__*/_jsx(\"button\",{className:\"action\",tabIndex:\"-1\",onClick:onKeyClick,children:\"Delete\"})]})]});};export default Keyboard;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Keyboard.jsx"],"names":["useState","useEffect","getRowLength","board","length","getColLength","getKeyboard","qwerty","keyboard","Array","i","map","letter","color","getLetterColorMap","Map","row","col","has","set","changeKeyboardColors","letterColorMap","get","getBackgroundColor","handleFocus","event","preventDefault","Keyboard","onKeyClick","setKeyboard","newKeyboard","JSON","parse","stringify","k","index","backgroundColor"],"mappings":"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","sourcesContent":["import '../css/Keyboard.css';\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst getRowLength = board => board.length\r\n\r\nconst getColLength = board => board[0].length\r\n\r\nconst getKeyboard = () => {\r\n    const qwerty = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], \r\n                    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], \r\n                    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']]\r\n\r\n    let keyboard = new Array(qwerty.length);\r\n\r\n    for (let i = 0; i < keyboard.length; i++) {\r\n        keyboard[i] = qwerty[i].map(letter => ({color: 'grey', letter: letter}))\r\n    }\r\n\r\n    return keyboard\r\n}\r\n\r\nconst getLetterColorMap = (board) => {\r\n    let map = new Map()\r\n\r\n    for (let row = 0; row < getRowLength(board); row++) {\r\n        for (let col = 0; col < getColLength(board); col++) {\r\n            let letter = board[row][col].letter\r\n            let color = board[row][col].color\r\n\r\n            if (!map.has(letter)) {\r\n                if (color !== 'empty') {\r\n                    map.set(letter, color)\r\n                } \r\n            } else {\r\n                if (color === 'green') {\r\n                    map.set(letter, color)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return map\r\n}\r\n\r\nconst changeKeyboardColors = (board, keyboard) => {\r\n    let letterColorMap = getLetterColorMap(board)\r\n\r\n    for (let row = 0; row < getRowLength(keyboard); row++) {\r\n        for (let col = 0; col < keyboard[row].length; col++) {\r\n            let letter = keyboard[row][col].letter\r\n\r\n            if (letterColorMap.has(letter)) {\r\n                keyboard[row][col].color = letterColorMap.get(letter)\r\n            }\r\n\r\n        }\r\n    }\r\n    return keyboard\r\n}\r\n\r\nconst getBackgroundColor = (color) => {\r\n    if (color === 'green') {\r\n        return '#538d4e'\r\n    } else if (color === 'yellow') {\r\n        return '#b59f3b'\r\n    } else if (color === 'gray') {\r\n        return '#3a3a3c'\r\n    } else {\r\n        return '#818384'\r\n    }\r\n}\r\n\r\nconst handleFocus = (event) => {\r\n    event.preventDefault()\r\n}\r\n\r\nconst Keyboard = ({board, onKeyClick}) => {\r\n    const [keyboard, setKeyboard] = useState(getKeyboard())\r\n\r\n    useEffect( () => {\r\n        const newKeyboard = JSON.parse(JSON.stringify(keyboard))\r\n        setKeyboard(changeKeyboardColors(board, newKeyboard))\r\n    }, [board])\r\n\r\n    return (\r\n        <div className='keyboard'>\r\n            <div className='keyboard-row'>{keyboard[0].map((k, index) => <button tabIndex=\"-1\" style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onFocus={handleFocus} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row-middle'>{keyboard[1].map((k, index) => <button tabIndex=\"-1\" style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row'>\r\n                <button className='action' tabIndex=\"-1\" onClick={onKeyClick}>Enter</button>\r\n                {keyboard[2].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}\r\n                <button className='action' tabIndex=\"-1\" onClick={onKeyClick}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Keyboard;"]},"metadata":{},"sourceType":"module"}