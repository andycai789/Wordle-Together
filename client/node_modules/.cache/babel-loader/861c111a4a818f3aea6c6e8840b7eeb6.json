{"ast":null,"code":"import React from'react';import Row from'./Row.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";var getColorFromLetter=function getColorFromLetter(color){if(color==='GREEN'){return'green';}else if(color==='YELLOW'){return'yellow';}else if(color==='GRAY'){return'gray';}else{return'';}};var formatToRow=function formatToRow(word,color){var wordArray=word.toUpperCase().split('');color=color.toUpperCase();return wordArray.map(function(letter,i){return{letter:letter,color:getColorFromLetter(color)};});};var ColoredRow=function ColoredRow(_ref){var name=_ref.name,color=_ref.color;return/*#__PURE__*/_jsx(Row,{row:formatToRow(name,color)});};export default ColoredRow;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/ColoredRow.jsx"],"names":["React","Row","getColorFromLetter","color","formatToRow","word","wordArray","toUpperCase","split","map","letter","i","ColoredRow","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,WAAhB,C,2CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,CACpC,GAAIA,KAAK,GAAK,OAAd,CAAuB,CACrB,MAAO,OAAP,CACD,CAFD,IAEO,IAAIA,KAAK,GAAK,QAAd,CAAwB,CAC7B,MAAO,QAAP,CACD,CAFM,IAEA,IAAIA,KAAK,GAAK,MAAd,CAAsB,CAC3B,MAAO,MAAP,CACD,CAFM,IAEA,CACL,MAAO,EAAP,CACD,CACF,CAVD,CAYA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAOF,KAAP,CAAiB,CACnC,GAAIG,CAAAA,SAAS,CAAGD,IAAI,CAACE,WAAL,GAAmBC,KAAnB,CAAyB,EAAzB,CAAhB,CACAL,KAAK,CAAGA,KAAK,CAACI,WAAN,EAAR,CACA,MAAOD,CAAAA,SAAS,CAACG,GAAV,CAAc,SAACC,MAAD,CAASC,CAAT,QAAgB,CAACD,MAAM,CAAEA,MAAT,CAAiBP,KAAK,CAAED,kBAAkB,CAACC,KAAD,CAA1C,CAAhB,EAAd,CAAP,CACD,CAJD,CAMA,GAAMS,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAmB,IAAjBC,CAAAA,IAAiB,MAAjBA,IAAiB,CAAXV,KAAW,MAAXA,KAAW,CACpC,mBACE,KAAC,GAAD,EAAK,GAAG,CAAEC,WAAW,CAACS,IAAD,CAAOV,KAAP,CAArB,EADF,CAGD,CAJD,CAMA,cAAeS,CAAAA,UAAf","sourcesContent":["import React from 'react'\r\nimport Row from './Row.jsx'\r\n\r\nconst getColorFromLetter = (color) => {\r\n  if (color === 'GREEN') {\r\n    return 'green'\r\n  } else if (color === 'YELLOW') {\r\n    return 'yellow'\r\n  } else if (color === 'GRAY') {\r\n    return 'gray'\r\n  } else {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst formatToRow = (word, color) => {\r\n  let wordArray = word.toUpperCase().split('')\r\n  color = color.toUpperCase()\r\n  return wordArray.map((letter, i) => ({letter: letter, color: getColorFromLetter(color)}))\r\n}\r\n\r\nconst ColoredRow = ({name, color}) => {\r\n  return (\r\n    <Row row={formatToRow(name, color)}/>\r\n  )\r\n}\r\n\r\nexport default ColoredRow"]},"metadata":{},"sourceType":"module"}