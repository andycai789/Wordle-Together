{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst convertBoardRowToString = boardRow => {\n  return boardRow.map(col => col.letter).join('');\n};\n\nconst inWordList = (boardRow, wordList) => {\n  return wordList.includes(convertBoardRowToString(boardRow).toLowerCase());\n};\n\nconst isWordle = (boardRow, wordle) => {\n  return convertBoardRowToString(boardRow) === wordle.toUpperCase();\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst getDefaultBoxValues = () => {\n  return {\n    color: 'empty',\n    letter: ''\n  };\n};\n\nconst createMxNBoard = (m, n) => {\n  return Array(m).fill().map(() => Array(n).fill().map(() => getDefaultBoxValues()));\n};\n\nconst setGreenBoxes = (map, boardRow, wordle) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].letter === wordle[i]) {\n      boardRow[i].color = 'green';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setYellowBoxes = (map, boardRow) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\n      boardRow[i].color = 'yellow';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setGreyBoxes = boardRow => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color === 'empty') {\n      boardRow[i].color = 'gray';\n    }\n  }\n};\n\nconst changeColorsInRow = (boardRow, wordle) => {\n  let map = new Map();\n\n  for (let i = 0; i < wordle.length; i++) {\n    if (!map.has(wordle[i])) {\n      map.set(wordle[i], {\n        val: 1\n      });\n    } else {\n      map.get(wordle[i]).val++;\n    }\n  }\n\n  setGreenBoxes(map, boardRow, wordle);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(map, boardRow);\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick,\n    wordList\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength)); // const [notification, setNotification] = useState({visible: false, message: 'empty'})\n\n  const row = useRef(0);\n  const col = useRef(0);\n  const isEndGame = useRef(false); // const hidePopUp = () => {\n  //     setNotification({visible: false, message: notification.message})\n  // }\n\n  useEffect(() => {\n    const checkWinConditions = newBoard => {\n      if (isWordle(newBoard[row.current], wordle)) {\n        isEndGame.current = true; // setTimeout(() => {\n        //     setNotification({visible: true, message: 'YOU WON'})\n        // }, 1500)\n      } else if (row.current === rowLength - 1) {\n        isEndGame.current = true; // setTimeout(() => {\n        //     setNotification({visible: true, message: 'YOU LOST'})\n        // }, 1500)\n      }\n    };\n\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (isEndGame.current) {\n      // setNotification({visible: true, message: 'GAME FINISHED'})\n      return;\n    }\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER') {\n      if (!hasFilledRow(col.current, colLength)) {\n        // setNotification({visible: true, message: 'Not enough letters'})\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        // setNotification({visible: true, message: 'Not in word list'})\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], wordle);\n      checkWinConditions(newBoard);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"ms20ccYH/M/PdmShGml0q84bsE4=\");\n\n_c = Game;\nexport default Game; // fetch('/board')\n// .then(response => response.json())\n// .then(data => {\n//     setBoard(data.board)})\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","convertBoardRowToString","boardRow","map","col","letter","join","inWordList","wordList","includes","toLowerCase","isWordle","wordle","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","getDefaultBoxValues","color","createMxNBoard","m","n","Array","fill","setGreenBoxes","i","get","val","setYellowBoxes","has","setGreyBoxes","changeColorsInRow","Map","set","Game","input","rowLength","colLength","handleKeyClick","board","setBoard","row","isEndGame","checkWinConditions","newBoard","current","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst convertBoardRowToString = boardRow => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.includes(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isWordle = (boardRow, wordle) => {\r\n    return convertBoardRowToString(boardRow) === wordle.toUpperCase();\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n  \r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n  \r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, wordle) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === wordle[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        }\r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < wordle.length; i++) {\r\n        if (!map.has(wordle[i])) {\r\n            map.set(wordle[i], {val: 1})\r\n        } else {\r\n            map.get(wordle[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick, wordList}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    // const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    // const hidePopUp = () => {\r\n    //     setNotification({visible: false, message: notification.message})\r\n    // }\r\n\r\n    useEffect(() => {\r\n        const checkWinConditions = (newBoard) => {\r\n            if (isWordle(newBoard[row.current], wordle)) {\r\n                isEndGame.current = true\r\n                // setTimeout(() => {\r\n                //     setNotification({visible: true, message: 'YOU WON'})\r\n                // }, 1500)\r\n            } else if (row.current === rowLength - 1){\r\n                isEndGame.current = true\r\n                // setTimeout(() => {\r\n                //     setNotification({visible: true, message: 'YOU LOST'})\r\n                // }, 1500)\r\n            }\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            // setNotification({visible: true, message: 'GAME FINISHED'})\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                // setNotification({visible: true, message: 'Not enough letters'})\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                // setNotification({visible: true, message: 'Not in word list'})\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            {/* <Notification notification={notification} hidePopUp={hidePopUp}/> */}\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n// fetch('/board')\r\n// .then(response => response.json())\r\n// .then(data => {\r\n//     setBoard(data.board)})"]},"metadata":{},"sourceType":"module"}