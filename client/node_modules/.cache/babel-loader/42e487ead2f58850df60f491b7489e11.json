{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport Notification from './Notification.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDefaultBoxValues = () => {\n  return {\n    color: 'empty',\n    letter: ''\n  };\n};\n\nconst createMxNBoard = (m, n) => {\n  return Array(m).fill().map(() => Array(n).fill().map(() => getDefaultBoxValues()));\n};\n\nconst convertBoardRowToString = boardRow => {\n  return boardRow.map(col => col.letter).join('');\n};\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst inWordList = (boardRow, wordList) => {\n  return wordList.has(convertBoardRowToString(boardRow).toLowerCase());\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst isWord = (boardRow, word) => {\n  return convertBoardRowToString(boardRow) === word.toUpperCase();\n};\n\nconst isPastMaxRow = (curRow, maxRow) => {\n  return curRow === maxRow;\n};\n\nconst setGreenBoxes = (map, boardRow, word) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].letter === word[i]) {\n      boardRow[i].color = 'green';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setYellowBoxes = (map, boardRow) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\n      boardRow[i].color = 'yellow';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setGreyBoxes = boardRow => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color === 'empty') {\n      boardRow[i].color = 'gray';\n    }\n  }\n};\n\nconst changeColorsInRow = (boardRow, word) => {\n  let map = new Map();\n\n  for (let i = 0; i < word.length; i++) {\n    if (!map.has(word[i])) {\n      map.set(word[i], {\n        val: 1\n      });\n    } else {\n      map.get(word[i]).val++;\n    }\n  }\n\n  setGreenBoxes(map, boardRow, word);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(boardRow);\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    word,\n    handleKeyClick,\n    wordList,\n    socket,\n    changeTyping\n  } = _ref;\n  // const [message, setMessage] = useState('')\n  const message = useRef('');\n  const [board, setBoard] = useState(createMxNBoard(5, 5));\n  const row = useRef(0);\n  const col = useRef(0);\n  const isEndGame = useRef(false);\n\n  const checkWinConditions = newBoard => {\n    if (isWord(newBoard[row.current], word) || isPastMaxRow(row.current, rowLength - 1)) {\n      isEndGame.current = true;\n    }\n  };\n\n  useEffect(() => {\n    socket.on('board', board => {\n      setBoard(board);\n    });\n    socket.on('canType', (newRow, newCol) => {\n      row.current = newRow;\n      col.current = newCol;\n      changeTyping(true);\n    });\n  }, []);\n  useEffect(() => {\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER') {\n      if (!hasFilledRow(col.current, colLength)) {\n        // setMessage(\"Not enough letters\")\n        message.current = 'Not enough letters';\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        // setMessage('Not in word list')\n        message.current = 'Not in word list';\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], word);\n      checkWinConditions(newBoard);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n      changeTyping(false);\n      socket.emit('nextPlayer', row.current, col.current);\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boards\",\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      message: message.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"kZEy893Al0lTzGyUIob6/CddReE=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Board","Keyboard","Notification","getDefaultBoxValues","color","letter","createMxNBoard","m","n","Array","fill","map","convertBoardRowToString","boardRow","col","join","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","wordList","has","toLowerCase","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","isWord","word","isPastMaxRow","curRow","maxRow","setGreenBoxes","i","get","val","setYellowBoxes","setGreyBoxes","changeColorsInRow","Map","set","Game","input","rowLength","colLength","handleKeyClick","socket","changeTyping","message","board","setBoard","row","isEndGame","checkWinConditions","newBoard","current","on","newRow","newCol","JSON","parse","stringify","emit","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\nimport Notification from './Notification.jsx'\r\n\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst isWord = (boardRow, word) => {\r\n    return convertBoardRowToString(boardRow) === word.toUpperCase();\r\n}\r\n\r\nconst isPastMaxRow = (curRow, maxRow) => {\r\n    return curRow === maxRow\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, word) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === word[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        } \r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, word)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(boardRow)\r\n}\r\n\r\nconst Game = ({input, rowLength, colLength, word, handleKeyClick, wordList, socket, changeTyping}) => {\r\n    // const [message, setMessage] = useState('')\r\n    const message = useRef('')\r\n    const [board, setBoard] = useState(createMxNBoard(5, 5))\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    const checkWinConditions = (newBoard) => {\r\n        if (isWord(newBoard[row.current], word) || isPastMaxRow(row.current, rowLength - 1)) {\r\n            \r\n            isEndGame.current = true\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('board', board => {\r\n            setBoard(board)\r\n        })\r\n\r\n        socket.on('canType', (newRow, newCol) => {\r\n            row.current = newRow\r\n            col.current = newCol\r\n            changeTyping(true)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                // setMessage(\"Not enough letters\")\r\n                message.current = 'Not enough letters'\r\n\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                // setMessage('Not in word list')\r\n                message.current = 'Not in word list'\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], word)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n\r\n            changeTyping(false)\r\n            socket.emit('nextPlayer', row.current, col.current)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div className='boards'>\r\n            <Notification message={message.current}/>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}