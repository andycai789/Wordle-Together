{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\pages\\\\GamePage.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useRef } from 'react';\nimport Game from '../Game.jsx';\nimport PlayerName from '../PlayerName.jsx';\nimport '../../css/GamePage.css';\nimport Notification from '../Notification.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GamePage = _ref => {\n  _s();\n\n  let {\n    socket,\n    settings,\n    permission,\n    getPermission\n  } = _ref;\n  const [userInput, setUserInput] = useState({\n    key: '',\n    time: 0\n  });\n  const [currentPlayer, setCurrentPlayer] = useState('');\n  const canType = useRef(false);\n  const navigate = useNavigate();\n  const message = useRef('');\n  const [visible, setVisible] = useState(false);\n\n  const pressKey = event => {\n    if (canType.current) {\n      let key = event instanceof KeyboardEvent ? event.key.toUpperCase() : event.target.innerText.toUpperCase();\n      socket.emit('key', key);\n      setUserInput({\n        key: key,\n        time: event.timeStamp\n      });\n    }\n  };\n\n  const changeTyping = status => {\n    canType.current = status;\n  };\n\n  const onMessage = newMessage => {\n    message.current = newMessage;\n    setVisible(true);\n    setTimeout(() => setVisible(false), 2000);\n  };\n\n  useEffect(() => {\n    if (getPermission() !== 'game') {\n      navigate('/', {\n        replace: true\n      });\n      return;\n    }\n\n    window.addEventListener('keydown', pressKey);\n    socket.on('setCurrentPlayer', name => {\n      setCurrentPlayer(name);\n    });\n    socket.on('gameResult', message => {\n      onMessage(message);\n    });\n    socket.on('returnToLobby', () => {\n      permission.current = 'lobby';\n      navigate('/lobby', {\n        replace: true\n      });\n    });\n    socket.emit('initialGameSettings');\n    return () => {\n      window.removeEventListener('keydown', pressKey);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gamePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notificationMessage\",\n      children: /*#__PURE__*/_jsxDEV(Notification, {\n        visible: visible,\n        message: message.current,\n        position: \"top-center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTurn\",\n      children: /*#__PURE__*/_jsxDEV(PlayerName, {\n        name: currentPlayer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Game, {\n      input: userInput,\n      rowLength: settings.rows,\n      colLength: settings.cols,\n      word: settings.word,\n      wordList: new Set(settings.wordList),\n      handleKeyClick: pressKey,\n      socket: socket,\n      changeTyping: changeTyping,\n      handleMessage: onMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GamePage, \"nsxc9DMf65itSAq/dh4rPjYXp8I=\", false, function () {\n  return [useNavigate];\n});\n\n_c = GamePage;\nexport default GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/pages/GamePage.jsx"],"names":["React","useNavigate","useState","useEffect","useRef","Game","PlayerName","Notification","GamePage","socket","settings","permission","getPermission","userInput","setUserInput","key","time","currentPlayer","setCurrentPlayer","canType","navigate","message","visible","setVisible","pressKey","event","current","KeyboardEvent","toUpperCase","target","innerText","emit","timeStamp","changeTyping","status","onMessage","newMessage","setTimeout","replace","window","addEventListener","on","name","removeEventListener","rows","cols","word","Set","wordList"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport Game from '../Game.jsx'\r\nimport PlayerName from '../PlayerName.jsx'\r\nimport '../../css/GamePage.css';\r\nimport Notification from '../Notification.jsx'\r\n\r\nconst GamePage = ({socket, settings, permission, getPermission}) => {\r\n    const [userInput, setUserInput] = useState({key: '', time: 0})\r\n    const [currentPlayer, setCurrentPlayer] = useState('')\r\n    const canType = useRef(false)\r\n    const navigate = useNavigate()\r\n\r\n    const message = useRef('')\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const pressKey = (event) => {\r\n        if (canType.current) {\r\n            let key = (event instanceof KeyboardEvent) ? event.key.toUpperCase() : event.target.innerText.toUpperCase()\r\n            socket.emit('key', key)\r\n            setUserInput({key: key, time: event.timeStamp})\r\n        }\r\n    }\r\n\r\n    const changeTyping = (status) => {\r\n        canType.current = status\r\n    }\r\n\r\n    const onMessage = (newMessage) => {\r\n        message.current = newMessage\r\n        setVisible(true)\r\n        setTimeout(() => setVisible(false), 2000)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (getPermission() !== 'game') {\r\n            navigate('/', {replace: true})\r\n            return\r\n        }\r\n\r\n        window.addEventListener('keydown', pressKey)\r\n        socket.on('setCurrentPlayer', (name) => {\r\n            setCurrentPlayer(name)\r\n        })\r\n\r\n        socket.on('gameResult', (message) => {\r\n            onMessage(message)\r\n        }) \r\n\r\n        socket.on('returnToLobby', () => {\r\n            permission.current = 'lobby'\r\n            navigate('/lobby', {replace: true})\r\n        })\r\n\r\n        socket.emit('initialGameSettings')\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', pressKey)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"gamePage\">\r\n            <div className='notificationMessage'>\r\n                <Notification visible={visible} message={message.current} position='top-center'/>\r\n            </div>\r\n\r\n            <div className=\"playerTurn\">\r\n                <PlayerName name={currentPlayer}/>\r\n            </div>\r\n\r\n            <Game \r\n                input={userInput} \r\n                rowLength={settings.rows} \r\n                colLength={settings.cols} \r\n                word={settings.word}\r\n                wordList={new Set(settings.wordList)}\r\n                handleKeyClick={pressKey}\r\n                socket={socket}\r\n                changeTyping={changeTyping}\r\n                handleMessage={onMessage}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GamePage"]},"metadata":{},"sourceType":"module"}