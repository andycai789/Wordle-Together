{"ast":null,"code":"import React from'react';import Row from'./Row.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";var getColorFromLetter=function getColorFromLetter(color){if(color==='G'){return'green';}else if(color==='Y'){return'yellow';}else if(color==='X'){return'gray';}else{return'';}};var formatToRow=function formatToRow(word,colors){var wordArray=word.toUpperCase().split('');colors=colors.toUpperCase();return wordArray.map(function(letter,i){return{letter:letter,color:getColorFromLetter(colors[i])};});};var ColoredRow=function ColoredRow(_ref){var name=_ref.name,colors=_ref.colors;return/*#__PURE__*/_jsx(Row,{row:formatToRow(name,colors)});};export default ColoredRow;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/ColoredRow.jsx"],"names":["React","Row","getColorFromLetter","color","formatToRow","word","colors","wordArray","toUpperCase","split","map","letter","i","ColoredRow","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,WAAhB,C,2CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,KAAD,CAAW,CACpC,GAAIA,KAAK,GAAK,GAAd,CAAmB,CACjB,MAAO,OAAP,CACD,CAFD,IAEO,IAAIA,KAAK,GAAK,GAAd,CAAmB,CACxB,MAAO,QAAP,CACD,CAFM,IAEA,IAAIA,KAAK,GAAK,GAAd,CAAmB,CACxB,MAAO,MAAP,CACD,CAFM,IAEA,CACL,MAAO,EAAP,CACD,CACF,CAVD,CAYA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAOC,MAAP,CAAkB,CACpC,GAAIC,CAAAA,SAAS,CAAGF,IAAI,CAACG,WAAL,GAAmBC,KAAnB,CAAyB,EAAzB,CAAhB,CACAH,MAAM,CAAGA,MAAM,CAACE,WAAP,EAAT,CACA,MAAOD,CAAAA,SAAS,CAACG,GAAV,CAAc,SAACC,MAAD,CAASC,CAAT,QAAgB,CAACD,MAAM,CAAEA,MAAT,CAAiBR,KAAK,CAAED,kBAAkB,CAACI,MAAM,CAACM,CAAD,CAAP,CAA1C,CAAhB,EAAd,CAAP,CACD,CAJD,CAMA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAAoB,IAAlBC,CAAAA,IAAkB,MAAlBA,IAAkB,CAAZR,MAAY,MAAZA,MAAY,CACrC,mBACE,KAAC,GAAD,EAAK,GAAG,CAAEF,WAAW,CAACU,IAAD,CAAOR,MAAP,CAArB,EADF,CAGD,CAJD,CAMA,cAAeO,CAAAA,UAAf","sourcesContent":["import React from 'react'\r\nimport Row from './Row.jsx'\r\n\r\nconst getColorFromLetter = (color) => {\r\n  if (color === 'G') {\r\n    return 'green'\r\n  } else if (color === 'Y') {\r\n    return 'yellow'\r\n  } else if (color === 'X') {\r\n    return 'gray'\r\n  } else {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst formatToRow = (word, colors) => {\r\n  let wordArray = word.toUpperCase().split('')\r\n  colors = colors.toUpperCase()\r\n  return wordArray.map((letter, i) => ({letter: letter, color: getColorFromLetter(colors[i])}))\r\n}\r\n\r\nconst ColoredRow = ({name, colors}) => {\r\n  return (\r\n    <Row row={formatToRow(name, colors)}/>\r\n  )\r\n}\r\n\r\nexport default ColoredRow"]},"metadata":{},"sourceType":"module"}