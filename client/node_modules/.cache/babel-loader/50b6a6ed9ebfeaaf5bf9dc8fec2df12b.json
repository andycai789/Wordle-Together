{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst inDictionary = (boardRow, wordList) => {\n  return true;\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst isWordle = (row, wordle) => {\n  return convertRowToString(row) === wordle.toUpperCase();\n};\n\nconst convertRowToString = row => {\n  return row.map(col => col.letter).join('');\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst createMxNBoard = (m, n) => {\n  return Array.from({\n    length: m\n  }, () => new Array(n).fill({\n    color: 'empty',\n    letter: ''\n  }));\n};\n\nconst getMapOfWord = word => {\n  let map = new Map();\n\n  for (let i = 0; i < word.length; i++) {\n    if (!map.has(word[i])) {\n      map.set(word[i], {\n        val: 1\n      });\n    } else {\n      map.get(word[i]).val++;\n    }\n  }\n\n  return map;\n};\n\nconst changeColorsInRow = (boardRow, wordle) => {\n  const setGreenBoxes = (map, boardRow, wordle) => {\n    for (let i = 0; i < boardRow.length; i++) {\n      if (boardRow[i].letter === wordle[i]) {\n        boardRow[i].color = 'green';\n        map.get(boardRow[i].letter).val--;\n      }\n    }\n  };\n\n  const setYellowBoxes = (map, boardRow) => {\n    for (let i = 0; i < boardRow.length; i++) {\n      if (map.has(boardRow[i].letter)) {\n        if (map.get(boardRow[i].letter).val > 0) {\n          boardRow[i].color = 'yellow';\n          map.get(boardRow[i].letter).val--;\n        }\n      }\n    }\n  };\n\n  const setGreyBoxes = (map, boardRow) => {\n    for (let i = 0; i < boardRow.length; i++) {\n      if (boardRow[i].color === 'empty') {\n        boardRow[i].color = 'gray';\n      }\n    }\n  };\n\n  let map = getMapOfWord(wordle);\n  setGreenBoxes(map, boardRow, wordle);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(map, boardRow);\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength));\n  const [notification, setNotification] = useState({\n    visible: false,\n    message: 'empty'\n  });\n  const row = useRef(0);\n  const col = useRef(0);\n  const isEndGame = useRef(false);\n\n  const hidePopUp = () => {\n    setNotification({\n      visible: false,\n      message: notification.message\n    });\n  };\n\n  useEffect(() => {\n    const checkWinConditions = newBoard => {\n      if (isWordle(newBoard[row.current], wordle)) {\n        isEndGame.current = true;\n        setTimeout(() => {\n          setNotification({\n            visible: true,\n            message: 'YOU WON'\n          });\n        }, 1500);\n      } else if (row.current === rowLength - 1) {\n        isEndGame.current = true;\n        setTimeout(() => {\n          setNotification({\n            visible: true,\n            message: 'YOU LOST'\n          });\n        }, 1500);\n      }\n    };\n\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (isEndGame.current) {\n      setNotification({\n        visible: true,\n        message: 'GAME FINISHED'\n      });\n      return;\n    }\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key.toUpperCase();\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'Enter') {\n      if (!hasFilledRow(col.current, colLength)) {\n        setNotification({\n          visible: true,\n          message: 'Not enough letters'\n        });\n        return;\n      }\n\n      if (!inDictionary(newBoard[row.current])) {\n        setNotification({\n          visible: true,\n          message: 'Not in word list'\n        });\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], wordle);\n      checkWinConditions(newBoard);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n    } else if ((input.key === 'Backspace' || input.key === 'Delete') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Notification, {\n      notification: notification,\n      hidePopUp: hidePopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"oH+Co9JZFiA75x/H9yAIpaJuwK8=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inDictionary","boardRow","wordList","isDeletable","column","isWordle","row","wordle","convertRowToString","map","col","letter","join","hasFilledRow","maxColumn","hasEmptyBox","createMxNBoard","m","n","Array","from","fill","color","getMapOfWord","word","Map","i","has","set","val","get","changeColorsInRow","setGreenBoxes","setYellowBoxes","setGreyBoxes","Game","input","rowLength","colLength","handleKeyClick","board","setBoard","notification","setNotification","visible","message","isEndGame","hidePopUp","checkWinConditions","newBoard","current","setTimeout","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inDictionary = (boardRow, wordList) => {\r\n\r\n    return true\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst isWordle = (row, wordle) => {\r\n    return convertRowToString(row) === wordle.toUpperCase();\r\n}\r\n\r\nconst convertRowToString = row => {\r\n    return row.map(col => col.letter).join('')\r\n}\r\n\r\n  \r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n  \r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array.from({length: m}, () => new Array(n).fill(\r\n        {\r\n            color: 'empty',\r\n            letter: ''\r\n        }\r\n    ))\r\n}\r\n\r\nconst getMapOfWord = (word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    return map\r\n}\r\n  \r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    const setGreenBoxes = (map, boardRow, wordle) => {\r\n        for (let i = 0; i < boardRow.length; i++) {        \r\n            if (boardRow[i].letter === wordle[i]) {\r\n                boardRow[i].color = 'green'\r\n                map.get(boardRow[i].letter).val--\r\n            } \r\n        }\r\n    }\r\n    \r\n    const setYellowBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (map.has(boardRow[i].letter)) {\r\n                if (map.get(boardRow[i].letter).val > 0) {\r\n                    boardRow[i].color = 'yellow'\r\n                    map.get(boardRow[i].letter).val--\r\n                } \r\n            }\r\n        }\r\n    }\r\n    \r\n    const setGreyBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (boardRow[i].color === 'empty') {\r\n                boardRow[i].color = 'gray'\r\n            }\r\n        }\r\n    }\r\n  \r\n    let map = getMapOfWord(wordle)\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    const hidePopUp = () => {\r\n        setNotification({visible: false, message: notification.message})\r\n    }\r\n\r\n    useEffect(() => {\r\n        const checkWinConditions = (newBoard) => {\r\n            if (isWordle(newBoard[row.current], wordle)) {\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU WON'})\r\n                }, 1500)\r\n            } else if (row.current === rowLength - 1){\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU LOST'})\r\n                }, 1500)\r\n            }\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            setNotification({visible: true, message: 'GAME FINISHED'})\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key.toUpperCase()\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'Enter' ) {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                setNotification({visible: true, message: 'Not enough letters'})\r\n                return\r\n            }\r\n\r\n            if (!inDictionary(newBoard[row.current])) {\r\n                setNotification({visible: true, message: 'Not in word list'})\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'Backspace' || input.key === 'Delete') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            <Notification notification={notification} hidePopUp={hidePopUp}/>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}