{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDefaultBoxValues = () => {\n  return {\n    color: 'empty',\n    letter: ''\n  };\n};\n\nconst createMxNBoard = (m, n) => {\n  console.log(\"CALLED\");\n  console.log(m);\n  console.log(n);\n  return Array(m).fill().map(() => Array(n).fill().map(() => getDefaultBoxValues()));\n};\n\nconst convertBoardRowToString = boardRow => {\n  return boardRow.map(col => col.letter).join('');\n};\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst inWordList = (boardRow, wordList) => {\n  return wordList.has(convertBoardRowToString(boardRow).toLowerCase());\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst isWordle = (boardRow, wordle) => {\n  return convertBoardRowToString(boardRow) === wordle.toUpperCase();\n};\n\nconst isPastMaxRow = (curRow, maxRow) => {\n  return curRow === maxRow;\n};\n\nconst setGreenBoxes = (map, boardRow, wordle) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].letter === wordle[i]) {\n      boardRow[i].color = 'green';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setYellowBoxes = (map, boardRow) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\n      boardRow[i].color = 'yellow';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setGreyBoxes = boardRow => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color === 'empty') {\n      boardRow[i].color = 'gray';\n    }\n  }\n};\n\nconst changeColorsInRow = (boardRow, wordle) => {\n  let map = new Map();\n\n  for (let i = 0; i < wordle.length; i++) {\n    if (!map.has(wordle[i])) {\n      map.set(wordle[i], {\n        val: 1\n      });\n    } else {\n      map.get(wordle[i]).val++;\n    }\n  }\n\n  setGreenBoxes(map, boardRow, wordle);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(map, boardRow);\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick,\n    wordList,\n    socket\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength));\n  const row = useRef(0);\n  const col = useRef(0);\n  const isEndGame = useRef(false);\n  console.log(board);\n\n  const checkWinConditions = newBoard => {\n    if (isWordle(newBoard[row.current], wordle) || isPastMaxRow(row.current, rowLength - 1)) {\n      isEndGame.current = true;\n    }\n  };\n\n  socket.on('board', board => {\n    setBoard(board);\n  });\n  useEffect(() => {\n    if (isEndGame.current) {\n      return;\n    }\n\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER') {\n      if (!hasFilledRow(col.current, colLength)) {\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        console.log(\"NOT IN LIST\");\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], wordle);\n      checkWinConditions(newBoard);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"ms20ccYH/M/PdmShGml0q84bsE4=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","getDefaultBoxValues","color","letter","createMxNBoard","m","n","console","log","Array","fill","map","convertBoardRowToString","boardRow","col","join","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","wordList","has","toLowerCase","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","isWordle","wordle","isPastMaxRow","curRow","maxRow","setGreenBoxes","i","get","val","setYellowBoxes","setGreyBoxes","changeColorsInRow","Map","set","Game","input","rowLength","colLength","handleKeyClick","socket","board","setBoard","row","isEndGame","checkWinConditions","newBoard","current","on","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    console.log(\"CALLED\")\r\n    console.log(m)\r\n    console.log(n)\r\n\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst isWordle = (boardRow, wordle) => {\r\n    return convertBoardRowToString(boardRow) === wordle.toUpperCase();\r\n}\r\n\r\nconst isPastMaxRow = (curRow, maxRow) => {\r\n    return curRow === maxRow\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, wordle) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === wordle[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        }\r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < wordle.length; i++) {\r\n        if (!map.has(wordle[i])) {\r\n            map.set(wordle[i], {val: 1})\r\n        } else {\r\n            map.get(wordle[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick, wordList, socket}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    console.log(board)\r\n\r\n    const checkWinConditions = (newBoard) => {\r\n        if (isWordle(newBoard[row.current], wordle) || isPastMaxRow(row.current, rowLength - 1)) {\r\n            isEndGame.current = true\r\n        }\r\n    }\r\n\r\n    socket.on('board', board => {\r\n        setBoard(board)\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (isEndGame.current){\r\n            return\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                console.log(\"NOT IN LIST\")\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            {/* <Notification notification={notification} hidePopUp={hidePopUp}/> */}\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}