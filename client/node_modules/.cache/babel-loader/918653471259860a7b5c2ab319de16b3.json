{"ast":null,"code":"import _slicedToArray from\"C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from'react';import Board from'./Board.jsx';import Keyboard from'./Keyboard.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getDefaultBoxValues=function getDefaultBoxValues(){return{color:'empty',letter:''};};var createMxNBoard=function createMxNBoard(m,n){return Array(m).fill().map(function(){return Array(n).fill().map(function(){return getDefaultBoxValues();});});};var convertBoardRowToString=function convertBoardRowToString(boardRow){return boardRow.map(function(col){return col.letter;}).join('');};var inAlphabet=function inAlphabet(key){var charCode=key.toUpperCase().charCodeAt(0);return key.length===1&&charCode>64&&charCode<91;};var inWordList=function inWordList(boardRow,wordList){return wordList.has(convertBoardRowToString(boardRow).toLowerCase());};var isDeletable=function isDeletable(column){return column>0;};var hasFilledRow=function hasFilledRow(column,maxColumn){return column===maxColumn;};var hasEmptyBox=function hasEmptyBox(column,maxColumn){return column<maxColumn;};var setGreenBoxes=function setGreenBoxes(map,boardRow,word){for(var i=0;i<boardRow.length;i++){if(boardRow[i].letter===word[i]){boardRow[i].color='green';map.get(boardRow[i].letter).val--;}}};var setYellowBoxes=function setYellowBoxes(map,boardRow){for(var i=0;i<boardRow.length;i++){if(boardRow[i].color!=='green'&&map.has(boardRow[i].letter)&&map.get(boardRow[i].letter).val>0){boardRow[i].color='yellow';map.get(boardRow[i].letter).val--;}}};var setGreyBoxes=function setGreyBoxes(boardRow){for(var i=0;i<boardRow.length;i++){if(boardRow[i].color==='empty'){boardRow[i].color='gray';}}};var changeColorsInRow=function changeColorsInRow(boardRow,word){var map=new Map();for(var i=0;i<word.length;i++){if(!map.has(word[i])){map.set(word[i],{val:1});}else{map.get(word[i]).val++;}}setGreenBoxes(map,boardRow,word);setYellowBoxes(map,boardRow);setGreyBoxes(boardRow);};var Game=function Game(_ref){var input=_ref.input,rowLength=_ref.rowLength,colLength=_ref.colLength,word=_ref.word,handleKeyClick=_ref.handleKeyClick,wordList=_ref.wordList,socket=_ref.socket,changeTyping=_ref.changeTyping,handleMessage=_ref.handleMessage;var message=useRef('');var _useState=useState(createMxNBoard(5,5)),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var row=useRef(0);var col=useRef(0);useEffect(function(){socket.on('board',function(board){setBoard(board);});socket.on('canType',function(newRow,newCol){row.current=newRow;col.current=newCol;changeTyping(true);});},[]);useEffect(function(){var newBoard=JSON.parse(JSON.stringify(board));if(inAlphabet(input.key)&&hasEmptyBox(col.current,colLength)){newBoard[row.current][col.current].letter=input.key;col.current+=1;setBoard(newBoard);}else if(input.key==='ENTER'){if(!hasFilledRow(col.current,colLength)){handleMessage('Not enough letters');return;}if(!inWordList(newBoard[row.current],wordList)){handleMessage('Not in word list');return;}changeColorsInRow(newBoard[row.current],word);row.current+=1;col.current=0;setBoard(newBoard);changeTyping(false);socket.emit('nextPlayer',row.current,col.current);}else if((input.key==='BACKSPACE'||input.key==='DELETE')&&isDeletable(col.current)){newBoard[row.current][col.current-1].letter='';col.current-=1;setBoard(newBoard);}},[input.time]);return/*#__PURE__*/_jsxs(\"div\",{className:\"boards\",children:[/*#__PURE__*/_jsx(Board,{board:board}),/*#__PURE__*/_jsx(Keyboard,{board:board,onKeyClick:handleKeyClick})]});};export default Game;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Board","Keyboard","getDefaultBoxValues","color","letter","createMxNBoard","m","n","Array","fill","map","convertBoardRowToString","boardRow","col","join","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","wordList","has","toLowerCase","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","setGreenBoxes","word","i","get","val","setYellowBoxes","setGreyBoxes","changeColorsInRow","Map","set","Game","input","rowLength","colLength","handleKeyClick","socket","changeTyping","handleMessage","message","board","setBoard","row","on","newRow","newCol","current","newBoard","JSON","parse","stringify","emit","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, word) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === word[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        } \r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, word)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(boardRow)\r\n}\r\n\r\nconst Game = ({input, rowLength, colLength, word, handleKeyClick, wordList, socket, changeTyping, handleMessage}) => {\r\n    const message = useRef('')\r\n    const [board, setBoard] = useState(createMxNBoard(5, 5))\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n\r\n    useEffect(() => {\r\n        socket.on('board', board => {\r\n            setBoard(board)\r\n        })\r\n\r\n        socket.on('canType', (newRow, newCol) => {\r\n            row.current = newRow\r\n            col.current = newCol\r\n            changeTyping(true)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                handleMessage('Not enough letters')\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                handleMessage('Not in word list')\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], word)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n            changeTyping(false)\r\n            socket.emit('nextPlayer', row.current, col.current)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div className='boards'>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}