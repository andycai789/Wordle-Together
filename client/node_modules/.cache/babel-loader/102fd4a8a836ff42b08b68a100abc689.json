{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport Timer from './Timer.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDefaultBoxValues = () => {\n  return {\n    color: 'empty',\n    letter: ''\n  };\n};\n\nconst createMxNBoard = (m, n) => {\n  return Array(m).fill().map(() => Array(n).fill().map(() => getDefaultBoxValues()));\n};\n\nconst convertBoardRowToString = boardRow => {\n  return boardRow.map(col => col.letter).join('');\n};\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst inWordList = (boardRow, wordList) => {\n  return wordList.has(convertBoardRowToString(boardRow).toLowerCase());\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst setGreenBoxes = (map, boardRow, word) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].letter === word[i]) {\n      boardRow[i].color = 'green';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setYellowBoxes = (map, boardRow) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\n      boardRow[i].color = 'yellow';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setGreyBoxes = boardRow => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color === 'empty') {\n      boardRow[i].color = 'gray';\n    }\n  }\n};\n\nconst changeColorsInRow = (boardRow, word) => {\n  let map = new Map();\n\n  for (let i = 0; i < word.length; i++) {\n    if (!map.has(word[i])) {\n      map.set(word[i], {\n        val: 1\n      });\n    } else {\n      map.get(word[i]).val++;\n    }\n  }\n\n  setGreenBoxes(map, boardRow, word);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(boardRow);\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    colLength,\n    word,\n    handleKeyClick,\n    wordList,\n    socket,\n    changeTyping,\n    handleMessage,\n    currentPlayer\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(5, 5));\n  const row = useRef(0);\n  const col = useRef(0);\n  const maxTime = 4;\n  const [seconds, setSeconds] = useState(maxTime);\n\n  const getNextPlayer = () => {\n    changeTyping(false);\n    socket.emit('nextPlayer', row.current, col.current);\n  };\n\n  useEffect(() => {\n    socket.on('board', board => {\n      setBoard(board);\n    });\n    socket.on('canType', (newRow, newCol) => {\n      row.current = newRow;\n      col.current = newCol;\n      changeTyping(true);\n    });\n  }, []);\n  useEffect(() => {\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER' && seconds !== 0) {\n      if (!hasFilledRow(col.current, colLength)) {\n        handleMessage('Not enough letters');\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        handleMessage('Not in word list');\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], word);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n      getNextPlayer();\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"boards\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: seconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Timer, {\n      seconds: seconds,\n      setSeconds: setSeconds,\n      maxTime: maxTime,\n      socket: socket,\n      currentPlayer: currentPlayer,\n      getNextPlayer: getNextPlayer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"8GJfkYryskaYFHQib1+pLUAuZz0=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Board","Keyboard","Timer","getDefaultBoxValues","color","letter","createMxNBoard","m","n","Array","fill","map","convertBoardRowToString","boardRow","col","join","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","wordList","has","toLowerCase","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","setGreenBoxes","word","i","get","val","setYellowBoxes","setGreyBoxes","changeColorsInRow","Map","set","Game","input","colLength","handleKeyClick","socket","changeTyping","handleMessage","currentPlayer","board","setBoard","row","maxTime","seconds","setSeconds","getNextPlayer","emit","current","on","newRow","newCol","newBoard","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\nimport Timer from './Timer.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = (boardRow) => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n\r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, word) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === word[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        } \r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, word)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(boardRow)\r\n}\r\n\r\nconst Game = (\r\n    {\r\n        input, \r\n        colLength, \r\n        word, \r\n        handleKeyClick, \r\n        wordList, \r\n        socket, \r\n        changeTyping, \r\n        handleMessage,\r\n        currentPlayer\r\n    }) => {\r\n    const [board, setBoard] = useState(createMxNBoard(5, 5))\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const maxTime = 4\r\n    const [seconds, setSeconds] = useState(maxTime)\r\n\r\n    const getNextPlayer = () => {\r\n        changeTyping(false)\r\n        socket.emit('nextPlayer', row.current, col.current)\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('board', board => {\r\n            setBoard(board)\r\n        })\r\n\r\n        socket.on('canType', (newRow, newCol) => {\r\n            row.current = newRow\r\n            col.current = newCol\r\n            changeTyping(true)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER' && seconds !== 0) {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                handleMessage('Not enough letters')\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                handleMessage('Not in word list')\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], word)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n            getNextPlayer()\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div className='boards'>\r\n            <div>\r\n                {seconds}\r\n\r\n            </div>\r\n            <Timer \r\n                seconds={seconds}\r\n                setSeconds={setSeconds}\r\n                maxTime={maxTime}\r\n                socket={socket}\r\n                currentPlayer={currentPlayer}\r\n                getNextPlayer={getNextPlayer}\r\n            />\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}