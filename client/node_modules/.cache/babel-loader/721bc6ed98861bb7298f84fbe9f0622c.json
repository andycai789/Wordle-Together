{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst createMxNBoard = (m, n) => {\n  return Array.from({\n    length: m\n  }, () => new Array(n).fill({\n    color: 'empty',\n    letter: ''\n  }));\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength)); // const [notification, setNotification] = useState({visible: false, message: 'empty'})\n\n  useEffect(() => {\n    fetch('/board').then(response => response.json()).then(data => setBoard(data.board)); // const checkWinConditions = (newBoard) => {\n    //     if (isWordle(newBoard[row.current], wordle)) {\n    //         isEndGame.current = true\n    //         setTimeout(() => {\n    //             setNotification({visible: true, message: 'YOU WON'})\n    //         }, 1500)\n    //     } else if (row.current === rowLength - 1){\n    //         isEndGame.current = true\n    //         setTimeout(() => {\n    //             setNotification({visible: true, message: 'YOU LOST'})\n    //         }, 1500)\n    //     }\n    // }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"hhJH1SAGldNYAuZ+MdtKAopVtEs=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","createMxNBoard","m","n","Array","from","length","fill","color","letter","Game","input","rowLength","colLength","wordle","handleKeyClick","board","setBoard","fetch","then","response","json","data","time"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AAEA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;;AAEA,MAAMC,cAAc,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7B,SAAOC,KAAK,CAACC,IAAN,CAAW;AAACC,IAAAA,MAAM,EAAEJ;AAAT,GAAX,EAAwB,MAAM,IAAIE,KAAJ,CAAUD,CAAV,EAAaI,IAAb,CACjC;AACIC,IAAAA,KAAK,EAAE,OADX;AAEIC,IAAAA,MAAM,EAAE;AAFZ,GADiC,CAA9B,CAAP;AAMH,CAPD;;AASA,MAAMC,IAAI,GAAG,QAA2D;AAAA;;AAAA,MAA1D;AAACC,IAAAA,KAAD;AAAQC,IAAAA,SAAR;AAAmBC,IAAAA,SAAnB;AAA8BC,IAAAA,MAA9B;AAAsCC,IAAAA;AAAtC,GAA0D;AACpE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAACM,cAAc,CAACW,SAAD,EAAYC,SAAZ,CAAf,CAAlC,CADoE,CAEpE;;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,KAAK,CAAC,QAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACN,KAAN,CAF1B,EADY,CAMZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GApBQ,EAoBN,CAACL,KAAK,CAACY,IAAP,CApBM,CAAT;AAsBA,sBACI;AAAA,4BAEI,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEP;AAAd;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAwB,MAAA,UAAU,EAAED;AAApC;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAjCD;;GAAML,I;;KAAAA,I;AAmCN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n  \r\nconst createMxNBoard = (m, n) => {\r\n    return Array.from({length: m}, () => new Array(n).fill(\r\n        {\r\n            color: 'empty',\r\n            letter: ''\r\n        }\r\n    ))\r\n}\r\n\r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    // const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n\r\n    useEffect(() => {\r\n        fetch('/board')\r\n            .then(response => response.json())\r\n            .then(data => setBoard(data.board))\r\n\r\n\r\n        // const checkWinConditions = (newBoard) => {\r\n        //     if (isWordle(newBoard[row.current], wordle)) {\r\n        //         isEndGame.current = true\r\n        //         setTimeout(() => {\r\n        //             setNotification({visible: true, message: 'YOU WON'})\r\n        //         }, 1500)\r\n        //     } else if (row.current === rowLength - 1){\r\n        //         isEndGame.current = true\r\n        //         setTimeout(() => {\r\n        //             setNotification({visible: true, message: 'YOU LOST'})\r\n        //         }, 1500)\r\n        //     }\r\n        // }\r\n       \r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            {/* <Notification notification={notification} hidePopUp={hidePopUp}/> */}\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}