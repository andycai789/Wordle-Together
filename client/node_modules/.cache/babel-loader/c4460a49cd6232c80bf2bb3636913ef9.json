{"ast":null,"code":"import _slicedToArray from\"C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from'react';import Notification from'./Notification.jsx';import Board from'./Board.jsx';import Keyboard from'./Keyboard.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var inAlphabet=function inAlphabet(key){var charCode=key.toUpperCase().charCodeAt(0);return key.length===1&&charCode>64&&charCode<91;};var inDictionary=function inDictionary(boardRow){return true;};var isDeletable=function isDeletable(column){return column>0;};var isWordle=function isWordle(userWord,wordle){return userWord.map(function(object){return object.letter;}).join(\"\")===wordle.toUpperCase();};var hasFilledRow=function hasFilledRow(column,maxColumn){return column===maxColumn;};var hasEmptyBox=function hasEmptyBox(column,maxColumn){return column<maxColumn;};var createMxNBoard=function createMxNBoard(m,n){return Array.from({length:m},function(){return new Array(n).fill({color:'empty',letter:''});});};var getMapOfWord=function getMapOfWord(word){var map=new Map();for(var i=0;i<word.length;i++){if(!map.has(word[i])){map.set(word[i],{val:1});}else{map.get(word[i]).val++;}}return map;};var changeColorsInRow=function changeColorsInRow(boardRow,wordle){var setGreenBoxes=function setGreenBoxes(map,boardRow,wordle){for(var i=0;i<boardRow.length;i++){if(boardRow[i].letter===wordle[i]){boardRow[i].color='green';map.get(boardRow[i].letter).val--;}}};var setYellowBoxes=function setYellowBoxes(map,boardRow){for(var i=0;i<boardRow.length;i++){if(map.has(boardRow[i].letter)){if(map.get(boardRow[i].letter).val>0){boardRow[i].color='yellow';map.get(boardRow[i].letter).val--;}}}};var setGreyBoxes=function setGreyBoxes(map,boardRow){for(var i=0;i<boardRow.length;i++){if(boardRow[i].color==='empty'){boardRow[i].color='gray';}}};var map=getMapOfWord(wordle);setGreenBoxes(map,boardRow,wordle);setYellowBoxes(map,boardRow);setGreyBoxes(map,boardRow);};var Game=function Game(_ref){var input=_ref.input,rowLength=_ref.rowLength,colLength=_ref.colLength,wordle=_ref.wordle,handleKeyClick=_ref.handleKeyClick;var _useState=useState(createMxNBoard(rowLength,colLength)),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState({visible:false,message:'empty'}),_useState4=_slicedToArray(_useState3,2),notification=_useState4[0],setNotification=_useState4[1];var row=useRef(0);var col=useRef(0);var isEndGame=useRef(false);var hidePopUp=function hidePopUp(){setNotification({visible:false,message:notification.message});};useEffect(function(){var checkWinConditions=function checkWinConditions(newBoard){if(isWordle(newBoard[row.current],wordle)){setTimeout(function(){setNotification({visible:true,message:'YOU WON'});isEndGame.current=true;},1500);}else if(row.current===rowLength-1){setTimeout(function(){setNotification({visible:true,message:'YOU LOST'});isEndGame.current=true;},1500);}};var newBoard=JSON.parse(JSON.stringify(board));if(isEndGame.current){setNotification({visible:true,message:'GAME FINISHED'});return;}if(inAlphabet(input.key)&&hasEmptyBox(col.current,colLength)){newBoard[row.current][col.current].letter=input.key.toUpperCase();col.current+=1;setBoard(newBoard);}else if(input.key==='Enter'){if(!hasFilledRow(col.current,colLength)){setNotification({visible:true,message:'Not enough letters'});return;}if(!inDictionary(newBoard[row.current])){setNotification({visible:true,message:'Not in word list'});return;}changeColorsInRow(newBoard[row.current],wordle);checkWinConditions(newBoard);row.current+=1;col.current=0;setBoard(newBoard);}else if((input.key==='Backspace'||input.key==='Delete')&&isDeletable(col.current)){newBoard[row.current][col.current-1].letter='';col.current-=1;setBoard(newBoard);}},[input.time]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Notification,{notification:notification,hidePopUp:hidePopUp}),/*#__PURE__*/_jsx(Board,{board:board}),/*#__PURE__*/_jsx(Keyboard,{board:board,onKeyClick:handleKeyClick})]});};export default Game;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inDictionary","boardRow","isDeletable","column","isWordle","userWord","wordle","map","object","letter","join","hasFilledRow","maxColumn","hasEmptyBox","createMxNBoard","m","n","Array","from","fill","color","getMapOfWord","word","Map","i","has","set","val","get","changeColorsInRow","setGreenBoxes","setYellowBoxes","setGreyBoxes","Game","input","rowLength","colLength","handleKeyClick","board","setBoard","visible","message","notification","setNotification","row","col","isEndGame","hidePopUp","checkWinConditions","newBoard","current","setTimeout","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inDictionary = (boardRow) => {\r\n    return true\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst isWordle = (userWord, wordle) => {\r\n    return userWord.map(object => object.letter).join(\"\") === wordle.toUpperCase();\r\n}\r\n  \r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n  \r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array.from({length: m}, () => new Array(n).fill(\r\n        {\r\n            color: 'empty',\r\n            letter: ''\r\n        }\r\n    ))\r\n}\r\n\r\nconst getMapOfWord = (word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    return map\r\n}\r\n  \r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    const setGreenBoxes = (map, boardRow, wordle) => {\r\n        for (let i = 0; i < boardRow.length; i++) {        \r\n            if (boardRow[i].letter === wordle[i]) {\r\n                boardRow[i].color = 'green'\r\n                map.get(boardRow[i].letter).val--\r\n            } \r\n        }\r\n    }\r\n    \r\n    const setYellowBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (map.has(boardRow[i].letter)) {\r\n                if (map.get(boardRow[i].letter).val > 0) {\r\n                    boardRow[i].color = 'yellow'\r\n                    map.get(boardRow[i].letter).val--\r\n                } \r\n            }\r\n        }\r\n    }\r\n    \r\n    const setGreyBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (boardRow[i].color === 'empty') {\r\n                boardRow[i].color = 'gray'\r\n            }\r\n        }\r\n    }\r\n  \r\n    let map = getMapOfWord(wordle)\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    const hidePopUp = () => {\r\n        setNotification({visible: false, message: notification.message})\r\n    }\r\n\r\n    useEffect(() => {\r\n        const checkWinConditions = (newBoard) => {\r\n            if (isWordle(newBoard[row.current], wordle)) {\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU WON'})\r\n                    isEndGame.current = true\r\n                }, 1500)\r\n            } else if (row.current === rowLength - 1){\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU LOST'})\r\n                    isEndGame.current = true\r\n                }, 1500)\r\n            }\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            setNotification({visible: true, message: 'GAME FINISHED'})\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key.toUpperCase()\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'Enter' ) {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                setNotification({visible: true, message: 'Not enough letters'})\r\n                return\r\n            }\r\n\r\n            if (!inDictionary(newBoard[row.current])) {\r\n                setNotification({visible: true, message: 'Not in word list'})\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'Backspace' || input.key === 'Delete') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            <Notification notification={notification} hidePopUp={hidePopUp}/>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}