{"ast":null,"code":"import _slicedToArray from\"C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect,useRef}from'react';import Notification from'./Notification.jsx';import Board from'./Board.jsx';import Keyboard from'./Keyboard.jsx';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var inAlphabet=function inAlphabet(key){var charCode=key.toUpperCase().charCodeAt(0);return key.length===1&&charCode>64&&charCode<91;};var inWordList=function inWordList(row,wordList){return wordList.includes(convertRowToString(row).toLowerCase());};var isDeletable=function isDeletable(column){return column>0;};var isWordle=function isWordle(row,wordle){return convertRowToString(row)===wordle.toUpperCase();};var convertRowToString=function convertRowToString(row){return row.map(function(col){return col.letter;}).join('');};var hasFilledRow=function hasFilledRow(column,maxColumn){return column===maxColumn;};var hasEmptyBox=function hasEmptyBox(column,maxColumn){return column<maxColumn;};var createMxNBoard=function createMxNBoard(m,n){return Array.from({length:m},function(){return new Array(n).fill({color:'empty',letter:''});});};var getMapOfWord=function getMapOfWord(word){var map=new Map();for(var i=0;i<word.length;i++){if(!map.has(word[i])){map.set(word[i],{val:1});}else{map.get(word[i]).val++;}}return map;};var changeColorsInRow=function changeColorsInRow(boardRow,wordle){var setGreenBoxes=function setGreenBoxes(map,boardRow,wordle){for(var i=0;i<boardRow.length;i++){if(boardRow[i].letter===wordle[i]){boardRow[i].color='green';map.get(boardRow[i].letter).val--;}}};var setYellowBoxes=function setYellowBoxes(map,boardRow){for(var i=0;i<boardRow.length;i++){if(map.has(boardRow[i].letter)){if(map.get(boardRow[i].letter).val>0){boardRow[i].color='yellow';map.get(boardRow[i].letter).val--;}}}};var setGreyBoxes=function setGreyBoxes(map,boardRow){for(var i=0;i<boardRow.length;i++){if(boardRow[i].color==='empty'){boardRow[i].color='gray';}}};var map=getMapOfWord(wordle);setGreenBoxes(map,boardRow,wordle);setYellowBoxes(map,boardRow);setGreyBoxes(map,boardRow);};var Game=function Game(_ref){var input=_ref.input,rowLength=_ref.rowLength,colLength=_ref.colLength,wordle=_ref.wordle,handleKeyClick=_ref.handleKeyClick,wordList=_ref.wordList;var _useState=useState(createMxNBoard(rowLength,colLength)),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];var _useState3=useState({visible:false,message:'empty'}),_useState4=_slicedToArray(_useState3,2),notification=_useState4[0],setNotification=_useState4[1];var row=useRef(0);var col=useRef(0);var isEndGame=useRef(false);var hidePopUp=function hidePopUp(){setNotification({visible:false,message:notification.message});};useEffect(function(){var checkWinConditions=function checkWinConditions(newBoard){if(isWordle(newBoard[row.current],wordle)){isEndGame.current=true;setTimeout(function(){setNotification({visible:true,message:'YOU WON'});},1500);}else if(row.current===rowLength-1){isEndGame.current=true;setTimeout(function(){setNotification({visible:true,message:'YOU LOST'});},1500);}};var newBoard=JSON.parse(JSON.stringify(board));if(isEndGame.current){setNotification({visible:true,message:'GAME FINISHED'});return;}if(inAlphabet(input.key)&&hasEmptyBox(col.current,colLength)){newBoard[row.current][col.current].letter=input.key.toUpperCase();col.current+=1;setBoard(newBoard);}else if(input.key==='Enter'){if(!hasFilledRow(col.current,colLength)){setNotification({visible:true,message:'Not enough letters'});return;}if(!inWordList(newBoard[row.current],wordList)){setNotification({visible:true,message:'Not in word list'});return;}changeColorsInRow(newBoard[row.current],wordle);checkWinConditions(newBoard);row.current+=1;col.current=0;setBoard(newBoard);}else if((input.key==='Backspace'||input.key==='Delete')&&isDeletable(col.current)){newBoard[row.current][col.current-1].letter='';col.current-=1;setBoard(newBoard);}},[input.time]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Notification,{notification:notification,hidePopUp:hidePopUp}),/*#__PURE__*/_jsx(Board,{board:board}),/*#__PURE__*/_jsx(Keyboard,{board:board,onKeyClick:handleKeyClick})]});};export default Game;","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","row","wordList","includes","convertRowToString","toLowerCase","isDeletable","column","isWordle","wordle","map","col","letter","join","hasFilledRow","maxColumn","hasEmptyBox","createMxNBoard","m","n","Array","from","fill","color","getMapOfWord","word","Map","i","has","set","val","get","changeColorsInRow","boardRow","setGreenBoxes","setYellowBoxes","setGreyBoxes","Game","input","rowLength","colLength","handleKeyClick","board","setBoard","visible","message","notification","setNotification","isEndGame","hidePopUp","checkWinConditions","newBoard","current","setTimeout","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (row, wordList) => {\r\n    return wordList.includes(convertRowToString(row).toLowerCase())\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n\r\nconst isWordle = (row, wordle) => {\r\n    return convertRowToString(row) === wordle.toUpperCase();\r\n}\r\n\r\nconst convertRowToString = row => {\r\n    return row.map(col => col.letter).join('')\r\n}\r\n\r\n  \r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n  \r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array.from({length: m}, () => new Array(n).fill(\r\n        {\r\n            color: 'empty',\r\n            letter: ''\r\n        }\r\n    ))\r\n}\r\n\r\nconst getMapOfWord = (word) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < word.length; i++) {\r\n        if (!map.has(word[i])) {\r\n            map.set(word[i], {val: 1})\r\n        } else {\r\n            map.get(word[i]).val++\r\n        }\r\n    }\r\n    return map\r\n}\r\n  \r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    const setGreenBoxes = (map, boardRow, wordle) => {\r\n        for (let i = 0; i < boardRow.length; i++) {        \r\n            if (boardRow[i].letter === wordle[i]) {\r\n                boardRow[i].color = 'green'\r\n                map.get(boardRow[i].letter).val--\r\n            } \r\n        }\r\n    }\r\n    \r\n    const setYellowBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (map.has(boardRow[i].letter)) {\r\n                if (map.get(boardRow[i].letter).val > 0) {\r\n                    boardRow[i].color = 'yellow'\r\n                    map.get(boardRow[i].letter).val--\r\n                } \r\n            }\r\n        }\r\n    }\r\n    \r\n    const setGreyBoxes = (map, boardRow) => {\r\n        for (let i = 0; i < boardRow.length; i++) {\r\n            if (boardRow[i].color === 'empty') {\r\n                boardRow[i].color = 'gray'\r\n            }\r\n        }\r\n    }\r\n  \r\n    let map = getMapOfWord(wordle)\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick, wordList}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const [notification, setNotification] = useState({visible: false, message: 'empty'})\r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    const hidePopUp = () => {\r\n        setNotification({visible: false, message: notification.message})\r\n    }\r\n\r\n    useEffect(() => {\r\n        const checkWinConditions = (newBoard) => {\r\n            if (isWordle(newBoard[row.current], wordle)) {\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU WON'})\r\n                }, 1500)\r\n            } else if (row.current === rowLength - 1){\r\n                isEndGame.current = true\r\n                setTimeout(() => {\r\n                    setNotification({visible: true, message: 'YOU LOST'})\r\n                }, 1500)\r\n            }\r\n        }\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            setNotification({visible: true, message: 'GAME FINISHED'})\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key.toUpperCase()\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'Enter' ) {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                setNotification({visible: true, message: 'Not enough letters'})\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                setNotification({visible: true, message: 'Not in word list'})\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'Backspace' || input.key === 'Delete') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            <Notification notification={notification} hidePopUp={hidePopUp}/>\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game"]},"metadata":{},"sourceType":"module"}