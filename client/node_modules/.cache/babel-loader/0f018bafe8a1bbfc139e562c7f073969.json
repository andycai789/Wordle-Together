{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Keyboard.jsx\",\n    _s = $RefreshSig$();\n\nimport '../css/Keyboard.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getRowLength = board => board.length;\n\nconst getColLength = board => board[0].length;\n\nconst getKeyboard = () => {\n  const qwerty = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], ['Z', 'X', 'C', 'V', 'B', 'N', 'M']];\n  let keyboard = new Array(qwerty.length);\n\n  for (let i = 0; i < keyboard.length; i++) {\n    keyboard[i] = qwerty[i].map(letter => ({\n      color: 'grey',\n      letter: letter\n    }));\n  }\n\n  return keyboard;\n};\n\nconst getLetterColorMap = board => {\n  let map = new Map();\n\n  for (let row = 0; row < getRowLength(board); row++) {\n    for (let col = 0; col < getColLength(board); col++) {\n      let letter = board[row][col].letter;\n      let color = board[row][col].color;\n\n      if (!map.has(letter)) {\n        if (color !== 'empty') {\n          map.set(letter, color);\n        }\n      } else {\n        if (color === 'green') {\n          map.set(letter, color);\n        }\n      }\n    }\n  }\n\n  return map;\n};\n\nconst changeKeyboardColors = (board, keyboard) => {\n  let letterColorMap = getLetterColorMap(board);\n\n  for (let row = 0; row < getRowLength(keyboard); row++) {\n    for (let col = 0; col < keyboard[row].length; col++) {\n      let letter = keyboard[row][col].letter;\n\n      if (letterColorMap.has(letter)) {\n        keyboard[row][col].color = letterColorMap.get(letter);\n      }\n    }\n  }\n\n  return keyboard;\n};\n\nconst getBackgroundColor = color => {\n  if (color === 'green') {\n    return '#538d4e';\n  } else if (color === 'yellow') {\n    return '#b59f3b';\n  } else if (color === 'gray') {\n    return '#3a3a3c';\n  } else {\n    return '#818384';\n  }\n};\n\nconst handleFocus = event => {\n  event.preventDefault();\n};\n\nconst Keyboard = _ref => {\n  _s();\n\n  let {\n    board,\n    onKeyClick\n  } = _ref;\n  const [keyboard, setKeyboard] = useState(getKeyboard());\n  useEffect(() => {\n    const newKeyboard = JSON.parse(JSON.stringify(keyboard));\n    setKeyboard(changeKeyboardColors(board, newKeyboard));\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"keyboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-row\",\n      children: keyboard[0].map((k, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        tabindex: \"-1\",\n        style: {\n          backgroundColor: getBackgroundColor(k.color)\n        },\n        onFocus: handleFocus,\n        onClick: onKeyClick,\n        children: [\" \", k.letter, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 74\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-row-middle\",\n      children: keyboard[1].map((k, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: getBackgroundColor(k.color)\n        },\n        onClick: onKeyClick,\n        children: [\" \", k.letter, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 81\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keyboard-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action\",\n        onClick: onKeyClick,\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), keyboard[2].map((k, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: getBackgroundColor(k.color)\n        },\n        onClick: onKeyClick,\n        children: [\" \", k.letter, \" \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 48\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"action\",\n        onClick: onKeyClick,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Keyboard, \"JeMLkEIME/0SH++gFFdvo5434ec=\");\n\n_c = Keyboard;\nexport default Keyboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Keyboard\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Keyboard.jsx"],"names":["useState","useEffect","getRowLength","board","length","getColLength","getKeyboard","qwerty","keyboard","Array","i","map","letter","color","getLetterColorMap","Map","row","col","has","set","changeKeyboardColors","letterColorMap","get","getBackgroundColor","handleFocus","event","preventDefault","Keyboard","onKeyClick","setKeyboard","newKeyboard","JSON","parse","stringify","k","index","backgroundColor"],"mappings":"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","sourcesContent":["import '../css/Keyboard.css';\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst getRowLength = board => board.length\r\n\r\nconst getColLength = board => board[0].length\r\n\r\nconst getKeyboard = () => {\r\n    const qwerty = [['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'], \r\n                    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'], \r\n                    ['Z', 'X', 'C', 'V', 'B', 'N', 'M']]\r\n\r\n    let keyboard = new Array(qwerty.length);\r\n\r\n    for (let i = 0; i < keyboard.length; i++) {\r\n        keyboard[i] = qwerty[i].map(letter => ({color: 'grey', letter: letter}))\r\n    }\r\n\r\n    return keyboard\r\n}\r\n\r\nconst getLetterColorMap = (board) => {\r\n    let map = new Map()\r\n\r\n    for (let row = 0; row < getRowLength(board); row++) {\r\n        for (let col = 0; col < getColLength(board); col++) {\r\n            let letter = board[row][col].letter\r\n            let color = board[row][col].color\r\n\r\n            if (!map.has(letter)) {\r\n                if (color !== 'empty') {\r\n                    map.set(letter, color)\r\n                } \r\n            } else {\r\n                if (color === 'green') {\r\n                    map.set(letter, color)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return map\r\n}\r\n\r\nconst changeKeyboardColors = (board, keyboard) => {\r\n    let letterColorMap = getLetterColorMap(board)\r\n\r\n    for (let row = 0; row < getRowLength(keyboard); row++) {\r\n        for (let col = 0; col < keyboard[row].length; col++) {\r\n            let letter = keyboard[row][col].letter\r\n\r\n            if (letterColorMap.has(letter)) {\r\n                keyboard[row][col].color = letterColorMap.get(letter)\r\n            }\r\n\r\n        }\r\n    }\r\n    return keyboard\r\n}\r\n\r\nconst getBackgroundColor = (color) => {\r\n    if (color === 'green') {\r\n        return '#538d4e'\r\n    } else if (color === 'yellow') {\r\n        return '#b59f3b'\r\n    } else if (color === 'gray') {\r\n        return '#3a3a3c'\r\n    } else {\r\n        return '#818384'\r\n    }\r\n}\r\n\r\nconst handleFocus = (event) => {\r\n    event.preventDefault()\r\n}\r\n\r\nconst Keyboard = ({board, onKeyClick}) => {\r\n    const [keyboard, setKeyboard] = useState(getKeyboard())\r\n\r\n    useEffect( () => {\r\n        const newKeyboard = JSON.parse(JSON.stringify(keyboard))\r\n        setKeyboard(changeKeyboardColors(board, newKeyboard))\r\n    }, [board])\r\n\r\n    return (\r\n        <div className='keyboard'>\r\n            <div className='keyboard-row'>{keyboard[0].map((k, index) => <button tabindex=\"-1\" style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onFocus={handleFocus} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row-middle'>{keyboard[1].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}</div>\r\n            <div className='keyboard-row'>\r\n                <button className='action' onClick={onKeyClick}>Enter</button>\r\n                {keyboard[2].map((k, index) => <button style={{ backgroundColor: getBackgroundColor(k.color)}} key={index} onClick={onKeyClick}> {k.letter} </button>)}\r\n                <button className='action' onClick={onKeyClick}>Delete</button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Keyboard;"]},"metadata":{},"sourceType":"module"}