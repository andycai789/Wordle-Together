{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andyc\\\\Desktop\\\\Web Programs\\\\Wordle with Friends\\\\client\\\\src\\\\components\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Notification from './Notification.jsx';\nimport Board from './Board.jsx';\nimport Keyboard from './Keyboard.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDefaultBoxValues = () => {\n  return {\n    color: 'empty',\n    letter: ''\n  };\n};\n\nconst createMxNBoard = (m, n) => {\n  return Array(m).fill().map(() => Array(n).fill().map(() => getDefaultBoxValues()));\n};\n\nconst convertBoardRowToString = boardRow => {\n  return boardRow.map(col => col.letter).join('');\n};\n\nconst inAlphabet = key => {\n  const charCode = key.toUpperCase().charCodeAt(0);\n  return key.length === 1 && charCode > 64 && charCode < 91;\n};\n\nconst inWordList = (boardRow, wordList) => {\n  return wordList.has(convertBoardRowToString(boardRow).toLowerCase());\n};\n\nconst isWordle = (boardRow, wordle) => {\n  return convertBoardRowToString(boardRow) === wordle.toUpperCase();\n};\n\nconst isDeletable = column => {\n  return column > 0;\n};\n\nconst hasFilledRow = (column, maxColumn) => {\n  return column === maxColumn;\n};\n\nconst hasEmptyBox = (column, maxColumn) => {\n  return column < maxColumn;\n};\n\nconst setGreenBoxes = (map, boardRow, wordle) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].letter === wordle[i]) {\n      boardRow[i].color = 'green';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setYellowBoxes = (map, boardRow) => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\n      boardRow[i].color = 'yellow';\n      map.get(boardRow[i].letter).val--;\n    }\n  }\n};\n\nconst setGreyBoxes = boardRow => {\n  for (let i = 0; i < boardRow.length; i++) {\n    if (boardRow[i].color === 'empty') {\n      boardRow[i].color = 'gray';\n    }\n  }\n};\n\nconst changeColorsInRow = (boardRow, wordle) => {\n  let map = new Map();\n\n  for (let i = 0; i < wordle.length; i++) {\n    if (!map.has(wordle[i])) {\n      map.set(wordle[i], {\n        val: 1\n      });\n    } else {\n      map.get(wordle[i]).val++;\n    }\n  }\n\n  setGreenBoxes(map, boardRow, wordle);\n  setYellowBoxes(map, boardRow);\n  setGreyBoxes(map, boardRow);\n};\n\nconst checkWinConditions = (newBoard, row, isEndGame) => {\n  if (isWordle(newBoard[row.current], wordle) || row.current === rowLength - 1) {\n    isEndGame.current = true;\n  }\n};\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    input,\n    rowLength,\n    colLength,\n    wordle,\n    handleKeyClick,\n    wordList\n  } = _ref;\n  const [board, setBoard] = useState(createMxNBoard(rowLength, colLength));\n  const row = useRef(0);\n  const col = useRef(0);\n  const isEndGame = useRef(false);\n  useEffect(() => {\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (isEndGame.current) {\n      return;\n    }\n\n    if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\n      newBoard[row.current][col.current].letter = input.key;\n      col.current += 1;\n      setBoard(newBoard);\n    } else if (input.key === 'ENTER') {\n      if (!hasFilledRow(col.current, colLength)) {\n        return;\n      }\n\n      if (!inWordList(newBoard[row.current], wordList)) {\n        return;\n      }\n\n      changeColorsInRow(newBoard[row.current], wordle);\n      checkWinConditions(newBoard, row, isEndGame);\n      row.current += 1;\n      col.current = 0;\n      setBoard(newBoard);\n    } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\n      newBoard[row.current][col.current - 1].letter = '';\n      col.current -= 1;\n      setBoard(newBoard);\n    }\n  }, [input.time]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      board: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Keyboard, {\n      board: board,\n      onKeyClick: handleKeyClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"ms20ccYH/M/PdmShGml0q84bsE4=\");\n\n_c = Game;\nexport default Game; // fetch('/board')\n// .then(response => response.json())\n// .then(data => {\n//     setBoard(data.board)})\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/andyc/Desktop/Web Programs/Wordle with Friends/client/src/components/Game.jsx"],"names":["React","useState","useEffect","useRef","Notification","Board","Keyboard","getDefaultBoxValues","color","letter","createMxNBoard","m","n","Array","fill","map","convertBoardRowToString","boardRow","col","join","inAlphabet","key","charCode","toUpperCase","charCodeAt","length","inWordList","wordList","has","toLowerCase","isWordle","wordle","isDeletable","column","hasFilledRow","maxColumn","hasEmptyBox","setGreenBoxes","i","get","val","setYellowBoxes","setGreyBoxes","changeColorsInRow","Map","set","checkWinConditions","newBoard","row","isEndGame","current","rowLength","Game","input","colLength","handleKeyClick","board","setBoard","JSON","parse","stringify","time"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\n\r\nimport Notification from './Notification.jsx'\r\nimport Board from './Board.jsx'\r\nimport Keyboard from './Keyboard.jsx'\r\n\r\nconst getDefaultBoxValues = () => {\r\n    return {\r\n        color: 'empty',\r\n        letter: ''\r\n    }\r\n}\r\n\r\nconst createMxNBoard = (m, n) => {\r\n    return Array(m).fill().map(()=>Array(n).fill().map(() => getDefaultBoxValues()))\r\n}\r\n\r\nconst convertBoardRowToString = boardRow => {\r\n    return boardRow.map(col => col.letter).join('')\r\n}\r\n\r\nconst inAlphabet = (key) => {    \r\n    const charCode = key.toUpperCase().charCodeAt(0)\r\n    return (key.length === 1) && (charCode > 64) && (charCode < 91) \r\n}\r\n\r\nconst inWordList = (boardRow, wordList) => {\r\n    return wordList.has(convertBoardRowToString(boardRow).toLowerCase())\r\n}\r\n\r\nconst isWordle = (boardRow, wordle) => {\r\n    return convertBoardRowToString(boardRow) === wordle.toUpperCase();\r\n}\r\n\r\nconst isDeletable = (column) => {\r\n    return column > 0\r\n}\r\n  \r\nconst hasFilledRow = (column, maxColumn) => {\r\n    return column === maxColumn\r\n}\r\n  \r\nconst hasEmptyBox = (column, maxColumn) => {\r\n    return column < maxColumn\r\n}\r\n\r\nconst setGreenBoxes = (map, boardRow, wordle) => {\r\n    for (let i = 0; i < boardRow.length; i++) {        \r\n        if (boardRow[i].letter === wordle[i]) {\r\n            boardRow[i].color = 'green'\r\n            map.get(boardRow[i].letter).val--\r\n        } \r\n    }\r\n}\r\n\r\nconst setYellowBoxes = (map, boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color !== 'green' && map.has(boardRow[i].letter) && map.get(boardRow[i].letter).val > 0) {\r\n            boardRow[i].color = 'yellow'\r\n            map.get(boardRow[i].letter).val--\r\n        }\r\n    }\r\n}\r\n\r\nconst setGreyBoxes = (boardRow) => {\r\n    for (let i = 0; i < boardRow.length; i++) {\r\n        if (boardRow[i].color === 'empty') {\r\n            boardRow[i].color = 'gray'\r\n        }\r\n    }\r\n}\r\n\r\nconst changeColorsInRow = (boardRow, wordle) => {\r\n    let map = new Map();\r\n    for (let i = 0; i < wordle.length; i++) {\r\n        if (!map.has(wordle[i])) {\r\n            map.set(wordle[i], {val: 1})\r\n        } else {\r\n            map.get(wordle[i]).val++\r\n        }\r\n    }\r\n    setGreenBoxes(map, boardRow, wordle)\r\n    setYellowBoxes(map, boardRow)\r\n    setGreyBoxes(map, boardRow)\r\n}\r\n  \r\nconst checkWinConditions = (newBoard, row, isEndGame) => {\r\n    if (isWordle(newBoard[row.current], wordle) || (row.current === rowLength - 1)) {\r\n        isEndGame.current = true\r\n    }\r\n}\r\n\r\nconst Game = ({input, rowLength, colLength, wordle, handleKeyClick, wordList}) => {\r\n    const [board, setBoard] = useState(createMxNBoard(rowLength, colLength))    \r\n    const row = useRef(0)\r\n    const col = useRef(0)\r\n    const isEndGame = useRef(false)\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        const newBoard = JSON.parse(JSON.stringify(board))\r\n\r\n        if (isEndGame.current){\r\n            return\r\n        }\r\n\r\n        if (inAlphabet(input.key) && hasEmptyBox(col.current, colLength)) {\r\n            newBoard[row.current][col.current].letter = input.key\r\n            col.current += 1\r\n            setBoard(newBoard)\r\n        } else if (input.key === 'ENTER') {\r\n            if (!hasFilledRow(col.current, colLength)) {\r\n                return\r\n            }\r\n\r\n            if (!inWordList(newBoard[row.current], wordList)) {\r\n                return \r\n            }\r\n\r\n            changeColorsInRow(newBoard[row.current], wordle)\r\n            checkWinConditions(newBoard, row, isEndGame)\r\n            row.current += 1\r\n            col.current = 0\r\n            setBoard(newBoard)\r\n        } else if ((input.key === 'BACKSPACE' || input.key === 'DELETE') && isDeletable(col.current)) {\r\n            newBoard[row.current][col.current - 1].letter = ''\r\n            col.current -= 1\r\n            setBoard(newBoard)\r\n        }\r\n    }, [input.time])\r\n\r\n    return (\r\n        <div>\r\n            {/* <Notification notification={notification} hidePopUp={hidePopUp}/> */}\r\n            <Board board={board}/>\r\n            <Keyboard board={board} onKeyClick={handleKeyClick}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game\r\n\r\n\r\n// fetch('/board')\r\n// .then(response => response.json())\r\n// .then(data => {\r\n//     setBoard(data.board)})"]},"metadata":{},"sourceType":"module"}